{"version":3,"file":"static/js/923.50ab64ff.chunk.js","mappings":"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","sources":["views/Post.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Button, Input, Avatar, Typography, List, message, Image } from 'antd';\r\nimport axios from 'axios';\r\nimport '../assets/styles/post.css';\r\n\r\nconst { Title, Paragraph } = Typography;\r\n\r\nexport default function Post() {\r\n  let userStr = sessionStorage.getItem(\"user\") || \"{}\"\r\n  let user = JSON.parse(userStr);\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n  const { postId } = useParams(); // Get the postId from the URL parameters\r\n  // State to store the reply text\r\n  const [replyText, setReplyText] = useState('');\r\n  const [post, setPost] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const position = 'bottom';\r\n  const align = 'center';\r\n\r\n  const [comments, setComments] = useState([]);\r\n\r\n  const fetchPost = () => {\r\n      // Make an API call to fetch the user data, including the avatarUrl\r\n      axios.get(`${apiUrl}/api/post/${postId}`)\r\n        .then((response) => {\r\n          if (response.data.code === '0') {\r\n            console.log(response.data);\r\n            const postData = response.data.data;\r\n            const commentData = response.data.data.comments ?? [];\r\n\r\n          // Fetch the user avatar for the post\r\n          const fetchPostAvatar = axios\r\n            .get(`${apiUrl}/img/${postData.avatarid}`)\r\n            .then((avatarResponse) => {\r\n              if (avatarResponse.data.code === '0') {\r\n                const avatarData = avatarResponse.data.data;\r\n                postData.avatar = `data:image/png;base64,${avatarData}`;\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.error('Error fetching post avatar:', error);\r\n            });\r\n            \r\n            const fetchPostScreenshot = axios\r\n              .get(`${apiUrl}/api/screenshot/${postData.pathid}`)\r\n              .then((screenshotResponse) => {\r\n                if (screenshotResponse.data.code === '0') {\r\n                  const screenshotData = screenshotResponse.data.data;\r\n                  postData.screenshot = `data:image/png;base64,${screenshotData}`;\r\n                }\r\n              })\r\n              .catch((error) => {\r\n                console.error('Error fetching post avatar:', error);\r\n              });\r\n\r\n            // Fetch the user avatar for each post and update the data array\r\n            const fetchCommentAvatars = commentData.map((comment) => {\r\n              return axios\r\n                .get(`${apiUrl}/api/avatar/${comment.userid}`)\r\n                .then((avatarResponse) => {\r\n                  if (avatarResponse.data.code === '0') {\r\n                      const avatarData = avatarResponse.data.data;\r\n                      comment.avatar = `data:image/png;base64,${avatarData}`;\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                  console.error('Error fetching user avatar:', error);\r\n                });\r\n            });\r\n            // Wait for all the avatar fetch calls to finish before updating the data array\r\n            Promise.all([fetchPostAvatar, fetchPostScreenshot, ...fetchCommentAvatars])\r\n              .then(() => {\r\n                // Sort the posts by createdAt in descending order (newest first)\r\n                commentData.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\r\n                setPost(postData);\r\n                setComments(commentData);\r\n                console.log(postData.screenshot);\r\n              })\r\n              .catch((error) => {\r\n                console.error('Error fetching user avatars:', error);\r\n              });\r\n          } else {\r\n            console.log(response.data.msg);\r\n          }\r\n          setIsLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching post data:', error);\r\n          setIsLoading(false);\r\n        });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPost();\r\n  }, []);\r\n\r\n  // Function to handle reply submission\r\n  const handleReplySubmit = () => {\r\n    const newComment = {\r\n      content: replyText,\r\n      userid: user.id, // You can get the username from your user object\r\n      username: user.username,\r\n      avatarid: user.avatarUrl,\r\n    };\r\n\r\n    // Make a POST request to the backend to save the new comment\r\n    axios.post(`${apiUrl}/api/post/${postId}/reply`, newComment)\r\n      .then((response) => {\r\n        // Handle successful response, for example, show a success message\r\n        console.log(response.data);\r\n        message.success('Reply added successfully!');\r\n        // Reset the replyText after submission\r\n        setReplyText('');\r\n        fetchPost();\r\n      })\r\n      .catch((error) => {\r\n        // Handle error, for example, show an error message\r\n        console.error('Error adding reply:', error);\r\n        message.error('Failed to add reply. Please try again later.');\r\n      });\r\n  };\r\n\r\n  // Conditional rendering based on the post state\r\n  if (isLoading || !post) {\r\n    return <div>Loading...</div>; // Show a loading indicator while fetching data\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='post-title' style={{ textAlign: 'left' }}>\r\n        <Title level={2}>{post.title}</Title>\r\n      </div>\r\n      <div className='avatar-info-container' style={{ display: 'flex', alignItems: 'center' }}>\r\n        <div className='avatar-container' style={{ marginRight: '16px' }}>\r\n          <Avatar src={post.avatar} size={64} />\r\n        </div>\r\n        <div className='post-username'>\r\n          <Title level={4}>{post.username}</Title>\r\n        </div>\r\n      </div>\r\n      <div className='post-content' style={{ textAlign: 'left' }}>\r\n        <Paragraph>{post.content}</Paragraph>\r\n      </div>\r\n      <div className='post-screenshot'>\r\n        <Image\r\n          src={post.screenshot}\r\n        />\r\n      </div>\r\n      <Input.TextArea\r\n        value={replyText}\r\n        onChange={(e) => setReplyText(e.target.value)}\r\n        rows={4}\r\n        placeholder=\"Enter your reply...\"\r\n      />\r\n      <Button onClick={handleReplySubmit}>Reply</Button>\r\n      <List\r\n        pagination={{\r\n          position,\r\n          align,\r\n        }}\r\n        dataSource={comments}\r\n        renderItem={(comment, index) => (\r\n          <List.Item>\r\n            <List.Item.Meta\r\n              avatar={\r\n                <Avatar src={comment.avatar} />\r\n              }\r\n              title={comment.username}\r\n              description={comment.content}\r\n            />\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}"],"names":["Title","Typography","Paragraph","Post","userStr","sessionStorage","getItem","user","JSON","parse","apiUrl","process","postId","useParams","_useState","useState","_useState2","_slicedToArray","replyText","setReplyText","_useState3","_useState4","post","setPost","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","comments","setComments","fetchPost","axios","get","concat","then","response","data","code","_response$data$data$c","console","log","postData","commentData","fetchPostAvatar","avatarid","avatarResponse","avatarData","avatar","catch","error","fetchPostScreenshot","pathid","screenshotResponse","screenshotData","screenshot","fetchCommentAvatars","map","comment","userid","Promise","all","_toConsumableArray","sort","a","b","Date","createdAt","msg","useEffect","_jsx","children","_jsxs","className","style","textAlign","level","title","display","alignItems","marginRight","Avatar","src","size","username","content","Image","Input","TextArea","value","onChange","e","target","rows","placeholder","Button","onClick","newComment","id","avatarUrl","message","success","List","pagination","position","align","dataSource","renderItem","index","Item","Meta","description"],"sourceRoot":""}