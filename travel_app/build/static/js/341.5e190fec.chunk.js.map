{"version":3,"file":"static/js/341.5e190fec.chunk.js","mappings":"8eAAaA,EAAW,CACpBC,mBAAmB,EACnBC,mBAAmB,EACnBC,OAAQ,CACN,CAAEC,YAAa,WAAYC,QAAS,CAAC,CAAEC,MAAO,aAC9C,CAAEF,YAAa,qBAAsBC,QAAS,CAAC,CAAEC,MAAO,aACxD,CAAEF,YAAa,mBAAoBC,QAAS,CAAC,CAAEC,MAAO,aACtD,CAAEC,YAAa,0BAA2BH,YAAa,mBAAoBC,QAAS,CAAC,CAAEC,MAAO,aAC9F,CAAEC,YAAa,MAAOH,YAAa,mBAAoBC,QAAS,CAAC,CAAEC,MAAO,aAC1E,CAAEC,YAAa,WAAYH,YAAa,WAAYC,QAAS,CAAC,CAAEC,MAAO,aACvE,CAAEC,YAAa,WAAYH,YAAa,mBAAoBC,QAAS,CAAC,CAAEC,MAAO,aAC/E,CAAEC,YAAa,OAAQH,YAAa,WAAYC,QAAS,CAAC,CAAEC,MAAO,aACnE,CAAEC,YAAa,OAAQH,YAAa,kBAAmBC,QAAS,CAAC,CAAEC,MAAO,aAC1E,CAAEC,YAAa,OAAQH,YAAa,mBAAoBC,QAAS,CAAC,CAAEC,MAAO,aAC3E,CAAEC,YAAa,eAAgBH,YAAa,WAAYC,QAAS,CAAC,CAAEC,MAAO,aAC3E,CAAEC,YAAa,eAAgBH,YAAa,kBAAmBC,QAAS,CAAC,CAAEC,MAAO,aAClF,CAAEC,YAAa,eAAgBH,YAAa,mBAAoBC,QAAS,CAAC,CAAEC,MAAO,aACnF,CAAEC,YAAa,UAAWH,YAAa,WAAYC,QAAS,CAAC,CAAEC,MAAO,aACtE,CAAEC,YAAa,kBAAmBH,YAAa,mBAAoBC,QAAS,CAAC,CAAEC,MAAO,aACtF,CAAEC,YAAa,QAASH,YAAa,WAAYC,QAAS,CAAC,CAAEC,MAAO,aACpE,CAAEC,YAAa,QAASH,YAAa,mBAAoBC,QAAS,CAAC,CAAEC,MAAO,aAC5E,CAAEC,YAAa,QAASH,YAAa,qBAAsBC,QAAS,CAAC,CAAEC,MAAO,e,SCHrE,SAASE,IACtB,IAAAC,GAAkCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAA8CL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAtDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAA4BT,EAAAA,EAAAA,UAAS,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAhCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAA8Bb,EAAAA,EAAAA,UAAS,IAAGc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA+CjB,EAAAA,EAAAA,UAAS,CAAEkB,IAAK,KAAMC,IAAK,OAAOC,GAAAlB,EAAAA,EAAAA,GAAAe,EAAA,GAA1EI,EAAeD,EAAA,GAAEE,EAAmBF,EAAA,GAC3CG,IAA4CvB,EAAAA,EAAAA,WAAS,GAAKwB,IAAAtB,EAAAA,EAAAA,GAAAqB,GAAA,GAAnDE,GAAcD,GAAA,GAAEE,GAAiBF,GAAA,GACxCG,IAAkC3B,EAAAA,EAAAA,UAAS,MAAK4B,IAAA1B,EAAAA,EAAAA,GAAAyB,GAAA,GAAzCE,GAASD,GAAA,GAAEE,GAAYF,GAAA,GAC9BG,IAA8B/B,EAAAA,EAAAA,UAAS,IAAGgC,IAAA9B,EAAAA,EAAAA,GAAA6B,GAAA,GAAnCE,GAAOD,GAAA,GAAEE,GAAUF,GAAA,GAC1BG,IAAkCnC,EAAAA,EAAAA,UAAS,MAAKoC,IAAAlC,EAAAA,EAAAA,GAAAiC,GAAA,GAAzCE,GAASD,GAAA,GAAEE,GAAYF,GAAA,GAC9BG,IAA8BvC,EAAAA,EAAAA,UAAS,MAAKwC,IAAAtC,EAAAA,EAAAA,GAAAqC,GAAA,GAArCE,GAAOD,GAAA,GAAEE,GAAUF,GAAA,GAC1BG,IAAoC3C,EAAAA,EAAAA,UAAS,GAAE4C,IAAA1C,EAAAA,EAAAA,GAAAyC,GAAA,GAAxCE,GAAUD,GAAA,GAAEE,GAAaF,GAAA,GAE1BG,GAASC,iCAETC,IAAcC,EAAAA,EAAAA,QAAO,IACrBC,IAAWD,EAAAA,EAAAA,QAAO,IAClBE,IAAYF,EAAAA,EAAAA,QAAO,IACnBG,IAAaH,EAAAA,EAAAA,QAAO,IAE1BI,KADsBJ,EAAAA,EAAAA,QAAO,KACWlD,EAAAA,EAAAA,UAAS,KAAGuD,IAAArD,EAAAA,EAAAA,GAAAoD,GAAA,GAA7CE,GAAYD,GAAA,GAAEE,GAAeF,GAAA,GAC9BG,IAAkBR,EAAAA,EAAAA,QAAO,IAC/BS,IAAgD3D,EAAAA,EAAAA,UAAS,IAAG4D,IAAA1D,EAAAA,EAAAA,GAAAyD,GAAA,GAAnCE,IAAFD,GAAA,GAAqBA,GAAA,IAItCE,IAAoBZ,EAAAA,EAAAA,QAAO,IAEjCa,IAA8B/D,EAAAA,EAAAA,WAAS,GAAMgE,IAAA9D,EAAAA,EAAAA,GAAA6D,GAAA,GAAtCE,GAAOD,GAAA,GACdE,IAD0BF,GAAA,IACMhE,EAAAA,EAAAA,aAAUmE,IAAAjE,EAAAA,EAAAA,GAAAgE,GAAA,GAAnCE,GAAQD,GAAA,GAEfE,IAF4BF,GAAA,IAEyBG,EAAAA,EAAAA,YAAWC,EAAAA,IAAxDC,GAAOH,GAAPG,QAASC,GAAaJ,GAAbI,cAAeC,GAAgBL,GAAhBK,iBACxBC,IAAUL,EAAAA,EAAAA,YAAWM,EAAAA,GAArBD,MAEFE,GAAY,SAACC,GACjB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcN,GACrBI,EAAOG,OAAS,kBAAML,EAAQE,EAAOI,OAAQ,EAC7CJ,EAAOK,QAAU,SAACC,GAAK,OAAKP,EAAOO,EAAO,CAC5C,GACF,EAEAC,IAAsCzF,EAAAA,EAAAA,WAAS,GAAM0F,IAAAxF,EAAAA,EAAAA,GAAAuF,GAAA,GAAjCE,IAAFD,GAAA,GAAgBA,GAAA,IAClCE,IAAwC5F,EAAAA,EAAAA,UAAS,IAAG6F,IAAA3F,EAAAA,EAAAA,GAAA0F,GAAA,GAA/BE,IAAFD,GAAA,GAAiBA,GAAA,IAI9BE,GAAa,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAAC,GAAA,IAAAvB,EAAAwB,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAA,EAAAA,KAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIlB,OAJ2B/B,EAAIuB,EAAJvB,KAAMwB,EAASD,EAATC,UAAWC,EAAOF,EAAPE,QAAOI,EAAAC,KAAA,GAE7CJ,EAAW,IAAIM,UACZC,OAAO,OAAQjC,GACxB6B,EAAAE,KAAA,EACuBG,EAAAA,EAAMC,KAAK,GAADC,OAAInE,GAAM,oBAAoByD,GAAU,KAAD,EAC7C,OADrBC,EAAQE,EAAAQ,MACDC,KAAKC,MAEhBC,QAAQC,IAAI,8BAA+Bd,EAASW,MACpDE,QAAQC,IAAId,EAASW,KAAKA,MAC1B/D,GAAWmE,QAAUf,EAASW,KAAKA,KACnCE,QAAQC,IAAIlE,GAAWmE,SACvBlB,KAEAC,EAAQ,IAAIkB,MAAM,0BACnBd,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,SAEDW,QAAQ9B,MAAM,wBAAuBmB,EAAAe,IACrCnB,EAAOI,EAAAe,IAAQ,yBAAAf,EAAAgB,OAAA,GAAAvB,EAAA,mBAElB,gBApBkBwB,GAAA,OAAA5B,EAAA6B,MAAA,KAAAC,UAAA,MAuBnBC,EAAAA,EAAAA,YAAU,WACRT,QAAQC,IAAI/D,GAEd,GAAG,CAACA,KAEJ,IAAMwE,GAAoB,eAAAC,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAAC,GAAA,IAAArD,EAAAwB,EAAAC,EAAAC,EAAAC,EAAA2B,EAAA,OAAAlC,EAAAA,EAAAA,KAAAQ,MAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,OAIzB,OAJkC/B,EAAIqD,EAAJrD,KAAMwB,EAAS6B,EAAT7B,UAAWC,EAAO4B,EAAP5B,QAAO8B,EAAAzB,KAAA,GAEpDJ,EAAW,IAAIM,UACZC,OAAO,OAAQjC,GACxBuD,EAAAxB,KAAA,EACuBG,EAAAA,EAAMC,KAAK,GAADC,OAAInE,GAAM,uBAAuByD,GAAU,KAAD,EAChD,OADrBC,EAAQ4B,EAAAlB,MACDC,KAAKC,MAEhBC,QAAQC,IAAI,iCAAkCd,EAASW,MACvDE,QAAQC,IAAId,EAASW,KAAKA,MACpBgB,EAAkB3B,EAASW,KAAKA,KACtC3D,IAAgB,SAACmD,GACf,IAAM0B,EAAe,GAAApB,QAAAqB,EAAAA,EAAAA,GAAO3B,GAAI,CAAEwB,IAElC,OADA1E,GAAgB8D,QAAUc,EACnBA,CACT,IAEAhC,KAEAC,EAAQ,IAAIkB,MAAM,6BACnBY,EAAAxB,KAAA,iBAAAwB,EAAAzB,KAAA,GAAAyB,EAAAX,GAAAW,EAAA,SAEDf,QAAQ9B,MAAM,2BAA0B6C,EAAAX,IACxCnB,EAAO8B,EAAAX,IAAQ,yBAAAW,EAAAV,OAAA,GAAAO,EAAA,mBAElB,gBAzByBM,GAAA,OAAAP,EAAAJ,MAAA,KAAAC,UAAA,KA2BpBW,GAAoC,eAAAC,GAAAzC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAwC,EAAAC,GAAA,IAAA9D,EAAAwB,EAAAC,EAAAsC,EAAArC,EAAAC,EAAA2B,EAAA,OAAAlC,EAAAA,EAAAA,KAAAQ,MAAA,SAAAoC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,OAGX,OAHoB/B,EAAI8D,EAAJ9D,KAAMwB,EAASsC,EAATtC,UAAWC,EAAOqC,EAAPrC,QAASsC,EAAMD,EAANC,OAAMC,EAAAlC,KAAA,GAE5EJ,EAAW,IAAIM,UACZC,OAAO,OAAQjC,GAAMgE,EAAAjC,KAAA,EACPG,EAAAA,EAAMC,KAAK,GAADC,OAAInE,GAAM,uBAAuByD,GAAU,KAAD,EAA7D,GACa,OADrBC,EAAQqC,EAAA3B,MACDC,KAAKC,KAAY,CAAAyB,EAAAjC,KAAA,SAS5B,OARAS,QAAQC,IAAI,iCAAkCd,EAASW,MACjDgB,EAAkB3B,EAASW,KAAKA,KAEtCyB,EAAOE,QAAO,GAAA7B,QAAAqB,EAAAA,EAAAA,GAAOM,EAAOE,SAAO,CAAEX,IAGrCpH,EAAWD,EAAQiI,KAAI,SAAAC,GAAC,OAAIA,IAAMJ,EAASA,EAASI,CAAC,KAErDH,EAAAjC,KAAA,GACMG,EAAAA,EAAMC,KAAK,GAADC,OAAInE,GAAM,sBAAsB8F,GAAQ,KAAD,GAEvDvC,IAAYwC,EAAAjC,KAAA,iBAEZN,EAAQ,IAAIkB,MAAM,6BAA6B,QAAAqB,EAAAjC,KAAA,iBAAAiC,EAAAlC,KAAA,GAAAkC,EAAApB,GAAAoB,EAAA,SAGjDxB,QAAQ9B,MAAM,2BAA0BsD,EAAApB,IACxCnB,EAAOuC,EAAApB,IAAQ,yBAAAoB,EAAAnB,OAAA,GAAAgB,EAAA,mBAElB,gBAzByCO,GAAA,OAAAR,EAAAb,MAAA,KAAAC,UAAA,KA2BpCqB,GAAa,eAAAC,GAAAnD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAkD,EAAOvE,GAAI,OAAAoB,EAAAA,EAAAA,KAAAQ,MAAA,SAAA4C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,UAC1B/B,EAAKyE,KAAQzE,EAAK0E,QAAO,CAAAF,EAAAzC,KAAA,eAAAyC,EAAAzC,KAAA,EACPhC,GAAUC,EAAK2E,eAAe,KAAD,EAAlD3E,EAAK0E,QAAOF,EAAAnC,KAAA,OAGdrB,GAAgBhB,EAAKyE,KAAOzE,EAAK0E,SACjC7D,IAAe,GAAM,wBAAA2D,EAAA3B,OAAA,GAAA0B,EAAA,KACtB,gBAPkBK,GAAA,OAAAN,EAAAvB,MAAA,KAAAC,UAAA,KASX6B,IAAaC,EAAAA,EAAAA,IAAc,CACjCC,iBAAkB7G,4CADZ2G,SAIRG,IAAoD9J,EAAAA,EAAAA,WAAS,GAAM+J,IAAA7J,EAAAA,EAAAA,GAAA4J,GAAA,GAA5DE,GAAkBD,GAAA,GAAEE,GAAqBF,GAAA,GAG1CG,IACJC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGnG,IAAUoG,EAAAA,EAAAA,KAACC,EAAAA,EAAe,KAAMD,EAAAA,EAAAA,KAACE,EAAAA,EAAY,KAC9CF,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAAEC,UAAW,GAAIL,SAAC,cAK5BM,GAAe,SAACC,GACK,SAArBA,EAAK7F,KAAK8F,OACZC,EAAAA,GAAQC,QAAQ,GAAD5D,OAAIyD,EAAK7F,KAAKiG,KAAI,2BACH,UAArBJ,EAAK7F,KAAK8F,QACnBC,EAAAA,GAAQrF,MAAM,GAAD0B,OAAIyD,EAAK7F,KAAKiG,KAAI,mBAEnC,EAGA,SAASC,KACP,OAAO,IAAIjG,SAAQ,SAACC,EAASC,GAC3BgG,UAAUC,YAAYC,oBACpB,SAACC,GACC,IAAAC,EAAgCD,EAASE,OAAjCC,EAAQF,EAARE,SAAUC,EAASH,EAATG,UAClBxG,EAAQ,CAAEuG,SAAAA,EAAUC,UAAAA,GACtB,IACA,SAAChG,GACCP,EAAOO,EACT,GAEJ,GACF,CAAC,SAGciG,GAAcC,GAAA,OAAAC,GAAA9D,MAAC,KAADC,UAAA,CA0C7B,SAAA6D,KAHC,OAGDA,IAAA1F,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MA1CA,SAAAyF,EAA8BjL,GAAM,IAAAkL,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjB,EAAA,OAAAlF,EAAAA,EAAAA,KAAAQ,MAAA,SAAA4F,GAAA,cAAAA,EAAA1F,KAAA0F,EAAAzF,MAAA,cAAAyF,EAAAzF,KAAA,EAE5B,IAAI9B,SAAQ,SAACC,GACjBuH,YAAW,WACTvH,GACF,GAAG,IACL,IAAG,KAAD,SAAAsH,EAAAzF,KAAA,EAEwDmE,KAAc,KAAD,EACnC,OADmCa,EAAAS,EAAAnF,KAArD2E,EAAQD,EAAlBN,SAA+BQ,EAAQF,EAAnBL,UAC5BlE,QAAQC,IAAI,CAAEuE,SAAAA,EAAUC,SAAAA,IAAYO,EAAAzF,KAAA,GAE9B,IAAI9B,SAAQ,SAACC,GACjBuH,YAAW,WACTvH,GACF,GAAG,IACL,IAAG,KAAD,UAAAsH,EAAAzF,KAAA,GAE0DmE,KAAc,KAAD,GACnC,OADmCgB,EAAAM,EAAAnF,KAAvD8E,EAASD,EAAnBT,SAAgCW,EAASF,EAApBR,UAC7BlE,QAAQC,IAAI,CAAE0E,UAAAA,EAAWC,UAAAA,IAAaI,EAAAzF,KAAA,GAEhC,IAAI9B,SAAQ,SAACC,GACjBuH,YAAW,WACTvH,GACF,GAAG,IACL,IAAG,KAAD,UAAAsH,EAAAzF,KAAA,GAEwDmE,KAAc,KAAD,GAAAmB,EAAAG,EAAAnF,KAArDiF,EAAQD,EAAlBZ,SAA+Bc,EAAQF,EAAnBX,UAC5BlE,QAAQC,IAAI,CAAE6E,SAAAA,EAAUC,SAAAA,IAElBjB,EAAW,CACfG,UAAWO,EAAWG,EAAYG,GAAY,EAC9CZ,WAAYO,EAAWG,EAAYG,GAAY,GAGjDjM,GAAa,SAACwG,GAAI,SAAAM,QAAAqB,EAAAA,EAAAA,GAAS3B,GAAI,CAAE,CAAE1F,IAAKkK,EAASG,SAAUpK,IAAKiK,EAASI,UAAWgB,KAAM,UAAW7L,OAAAA,IAAW,IAChHW,EAAoB,CAAEJ,IAAKkK,EAASG,SAAUpK,IAAKiK,EAASI,YAE5DlE,QAAQC,IAAI6D,GACZ1I,GAAW,IAAI+J,MAAS,yBAAAH,EAAA3E,OAAA,GAAAiE,EAAA,KACzBD,GAAA9D,MAAA,KAAAC,UAAA,EAIDC,EAAAA,EAAAA,YAAU,WACJkD,UAAUC,YACZD,UAAUC,YAAYC,oBACpB,SAACC,GAECtJ,GAAa,CACXZ,IAAKkK,EAASE,OAAOC,SACrBpK,IAAKiK,EAASE,OAAOE,WAEzB,IACA,SAAChG,GACC8B,QAAQ9B,MAAM,gCAAiCA,GAE/C1D,GAAa,CAAEZ,IAAK,QAASC,KAAM,QACrC,IAIFW,GAAa,CAAEZ,IAAK,QAASC,KAAM,QAEvC,GAAG,KAEH4G,EAAAA,EAAAA,YAAU,WACJtD,IAAiBA,GAAciI,OAAS,GAE1C5K,GAAa2C,GAAc,IAC3BvC,GAAW,KACF/B,EAAUuM,OAAS,GAE5B5K,GAAa3B,EAAUA,EAAUuM,OAAS,GAG9C,GAAG,CAACjI,GAAetE,KAEnB4H,EAAAA,EAAAA,YAAU,WACR,IAAI4E,EA4BJ,OA1BIpM,IACF+B,GAAa,IAAImK,MAEjBxB,UAAUC,YAAYC,oBACpB,SAACC,GACC,IAAAwB,EAAgCxB,EAASE,OAAjCC,EAAQqB,EAARrB,SAAUC,EAASoB,EAATpB,UAClBpL,GAAa,SAACwG,GAAI,SAAAM,QAAAqB,EAAAA,EAAAA,GAAS3B,GAAI,CAAE,CAAE1F,IAAKqK,EAAUpK,IAAKqK,EAAWgB,KAAM,UAAW7L,OAAAA,IAAW,IAC9FW,EAAoB,CAAEJ,IAAKqK,EAAUpK,IAAKqK,IAC1ClE,QAAQC,IAAI,4CACd,IACA,SAAC/B,GACC8B,QAAQ9B,MAAM,gCAAiCA,EACjD,IAIFmH,EAAWE,aAAW5G,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAA2G,IAAA,OAAA5G,EAAAA,EAAAA,KAAAQ,MAAA,SAAAqG,GAAA,cAAAA,EAAAnG,KAAAmG,EAAAlG,MAAA,OACQ,OAA7BS,QAAQC,IAAI,iBAAiBwF,EAAAlG,KAAA,EACvB4E,GAAe9K,GAAQ,KAAD,EAC5B2G,QAAQC,IAAI,kBACZD,QAAQC,IAAI5G,GAAQ,wBAAAoM,EAAApF,OAAA,GAAAmF,EAAA,KAEnB,MAIE,kBAAME,cAAcL,EAAU,CACvC,GAAG,CAACpM,EAAiBI,IAsHrBsM,EAAAA,EAAQC,UAAUlK,2CAElB,IA6LMmK,GAAqB,SAAHC,GAKjB,IAJLvE,EAAMuE,EAANvE,OACAwE,EAAgBD,EAAhBC,iBACAjK,EAASgK,EAAThK,UACA7C,EAAe6M,EAAf7M,gBAEA,OACE4J,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACG7J,GACE4J,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,YAEJC,EAAAA,EAAAA,KAAA,SACCjH,EAAUoE,YAIX2C,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,qCAEHC,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CACPC,WAAS,EACTC,UAAW,IACXhD,MAAO,CAAEiD,OAAQ,IAAKC,aAAc,IACpCC,YAAY,qBACZC,aAAc/E,EAAOgF,KACrBC,SAAU,SAACC,GAAC,OAAK3K,EAAUoE,QAAUuG,EAAEC,OAAOC,KAAK,QAI3D5D,EAAAA,EAAAA,KAAA,SAAS,aAETA,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAMC,aAAY,CACjB3E,QAAS,CACPsE,SAAU,SAACtG,EAASZ,GAAI,OAAKU,QAAQC,IAAI,kBAADL,OAAmBM,EAAO,kBAAAN,OAAiBN,GAAO,GAC1FwD,SAEDiD,EAAiBrE,KAAI,SAACoF,EAAaC,GAAK,OACvChE,EAAAA,EAAAA,KAAC6D,EAAAA,EAAK,CAAaI,MAAO,IAAKC,IAAG,yBAAArH,OAA2BkH,IAAjDC,EAAkE,SAKlF9N,IACA8J,EAAAA,EAAAA,KAACmE,EAAAA,EAAO,CAAApE,UACNC,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CACL1I,cAAe,SAAC2I,GAAM,OAAKjG,IAAoCkG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAID,GAAM,IAAE7F,OAAAA,IAAS,EACtF+F,SAAS,eACTC,UAAW1F,GACX2E,SAAUpD,GAAaN,SAEtBhG,IAAWiG,EAAAA,EAAAA,KAAA,OAAKkE,IAAKnK,GAAU0K,IAAI,SAAStE,MAAO,CAAE8D,MAAO,UAAepE,SAMxF,EAEM6E,GAAY,SAAClG,EAAQmG,GACzBC,EAAAA,EAAMC,QAAQ,CACZC,MAAO,oCACPC,SAAS/E,EAAAA,EAAAA,KAAC8C,GAAkB,CAE1BtE,OAAQA,EACRwE,iBAAkB2B,EAClB5L,UAAWA,GACX7C,gBAAiBA,IAJZ,IAAIkM,MAAO4C,WAOlBC,KAAM,SAACC,GACL,GAAIhP,EACFgP,QADF,CAIA,IAAMC,GAAab,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACd9F,GAAM,IACTgF,KAAMzK,GAAUoE,UAIlBR,EAAAA,EAAMC,KAAK,GAADC,OAAInE,GAAM,sBAAsByM,GACvCC,MAAK,SAAAhJ,GACuB,MAAvBA,EAASW,KAAKC,MAChBC,QAAQC,IAAI,2CAGZvG,EAAWD,EAAQiI,KAAI,SAAAC,GAAC,OAAIA,EAAEyG,KAAO7G,EAAO6G,GAAKF,EAAgBvG,CAAC,MAElE3B,QAAQC,IAAI,qCAAsCd,EAASW,KAAKyD,SAElE0E,GACF,IACCI,OAAM,SAAAnK,GACL8B,QAAQ9B,MAAM,0CAA2CA,GACzD+J,GACF,GAtBF,CAuBF,GAEJ,EAKMK,GAAmBzP,EAAU0P,QAAO,SAACC,EAAK1E,GAE9C,OADC0E,EAAI1E,EAASzK,QAAUmP,EAAI1E,EAASzK,SAAW,IAAIoP,KAAK3E,GAClD0E,CACT,GAAG,CAAC,GAWEE,GAAwB,WAC5BtO,IAAmBD,GACrB,EAIMwO,GAAgB,eAAAC,GAAAjK,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgK,IAAA,IAAAC,EAAA,OAAAlK,EAAAA,EAAAA,KAAAQ,MAAA,SAAA2J,GAAA,cAAAA,EAAAzJ,KAAAyJ,EAAAxJ,MAAA,OACvBoD,IAAsB,GAEhBmG,EAAeE,SAASC,cAAc,kBAE5CC,IAAYJ,EAAc,CAAEK,SAAS,EAAMC,YAAY,IAAQjB,MAAK,SAACkB,GACnE,IAAMC,EAAON,SAASO,cAAc,KACpCD,EAAKE,KAAOH,EAAOI,UAAU,aAC7BH,EAAKI,SAAW,iBAChBJ,EAAKK,QAELhH,IAAsB,EACxB,IAAG,wBAAAoG,EAAA1I,OAAA,GAAAwI,EAAA,KACJ,kBAbqB,OAAAD,EAAArI,MAAA,KAAAC,UAAA,KAehBoJ,GAAqB,eAAAC,GAAAlL,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiL,IAAA,IAAAhB,EAAA,OAAAlK,EAAAA,EAAAA,KAAAQ,MAAA,SAAA2K,GAAA,cAAAA,EAAAzK,KAAAyK,EAAAxK,MAAA,OAC5BoD,IAAsB,GAEhBmG,EAAeE,SAASC,cAAc,kBAE5CC,IAAYJ,EAAc,CAAEK,SAAS,EAAMC,YAAY,IAAQjB,MAAK,SAACkB,GACtDA,EAAOW,QAAO,SAACC,GAC1B,GAAIA,EAAM,CACR,IAAMzM,EAAO,IAAI0M,KAAK,CAACD,GAAO,iBAAkB,CAAE/E,KAAM,cAEpDvB,UAAUwG,MAEZxG,UAAUwG,MAAM,CACdC,MAAO,CAAC5M,KAGVwC,QAAQ9B,MAAM,+BAElB,MACE8B,QAAQ9B,MAAM,uCAGhByE,IAAsB,EACxB,GACF,IAAG,wBAAAoH,EAAA1J,OAAA,GAAAyJ,EAAA,KACJ,kBAzB0B,OAAAD,EAAAtJ,MAAA,KAAAC,UAAA,KA2B3B,OAAK6B,IAIHU,EAAAA,EAAAA,KAAA,OAAKsH,UAAU,WAAUvH,UACvBD,EAAAA,EAAAA,MAAA,OAAKwH,UAAU,gBAAevH,SAAA,EAC5BD,EAAAA,EAAAA,MAACyH,EAAAA,GAAS,CACRC,OAAQhQ,GACRiQ,KAAM7P,GACN8P,sBAAsB,gBACtBC,SAAOrD,EAAAA,EAAAA,GAAA,CACLpP,mBAAmB,EACnBC,mBAAmB,GACN,YAAVmF,GAAsB,CAAC,EAAIrF,GAC9B8K,SAAA,CAED3I,IAAkBwQ,OAAOC,OAAOtC,IAAkB5G,KAAI,SAACmJ,EAAe9D,GAAK,OAC1EhE,EAAAA,EAAAA,KAAC+H,EAAAA,GAAS,CAERC,KAAMF,EACNH,QAAS,CACPM,YAAa,UACbC,cAAe,EACfC,aAAc,IALXnE,EAOL,IAGH5J,IAAiBhD,KAChB4I,EAAAA,EAAAA,KAAC+H,EAAAA,GAAS,CACRC,KAAM5N,GACNuN,QAAS,CACPM,YAAa,UACbC,cAAe,EACfC,aAAc,KAKnBzR,EAAQiI,KAAI,SAAAH,GAAM,OACjBwB,EAAAA,EAAAA,KAACoI,EAAAA,GAAO,CAENrH,SAAU,CAAElK,IAAK2H,EAAO6J,UAAWvR,IAAK0H,EAAO8J,WAC/CC,QAAyB,WAAhB/J,EAAO2D,KAChBqG,KAAMhK,EAAOU,IAEbuJ,QAAS,kBAnPK,SAACjK,GACzBvB,QAAQC,IAAI,kBAAoBsB,EAAOgF,MAGvC,IAAMkF,EAAWlK,EAAOE,QAAQC,KAAI,SAAAgK,GAClC,OAAOhM,EAAAA,EAAMiM,IAAI,GAAD/L,OAAInE,GAAM,iBAAAmE,OAAgB8L,IACvCvD,MAAK,SAAChJ,GACL,MAA2B,MAAvBA,EAASW,KAAKC,KACTZ,EAASW,KAAKA,MAErBE,QAAQC,IAAI,qBACL,KAEX,IACCoI,OAAM,SAACnK,GAEN,OADA8B,QAAQ9B,MAAM,+BAAgCA,GACvC,IACT,GACJ,IAGAT,QAAQmO,IAAIH,GACTtD,MAAK,SAACT,GAEL,IAAMmE,EAA2BnE,EAAiBoE,QAAO,SAAAC,GAAW,OAAoB,OAAhBA,CAAoB,IAC5FxP,GAAoBsP,GAEpBpE,GAAUlG,EAAQsK,EACpB,GACJ,CAsN2BG,CAAkBzK,EAAO,GALnCA,EAAO0K,SAMZ,QAKNlJ,EAAAA,EAAAA,KAAA,OAAKsH,UAAU,6BAA4BvH,SACxC7J,GACC8J,EAAAA,EAAAA,KAACmJ,EAAAA,GAAM,CACLhH,KAAK,UACLiH,MAAM,QACNC,KAAK,QACLZ,QA5Ze,WACzBtS,GAAmB,GACnB8G,QAAQC,IAAI,iBAEZ,IAAMoM,GAAYlR,GAAUJ,IAAa,IACrCsR,EAAW,GACb1E,EAAAA,EAAM2E,QAAQ,CACZC,UAAU,EACV1E,MAAO,UACPC,QAAS,iEAKbH,EAAAA,EAAMC,QAAQ,CACZ2E,UAAU,EACV1E,MAAO,iCACPC,SACEjF,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gCACHC,EAAAA,EAAAA,KAACyJ,EAAAA,EAAK,CACJhG,SAAU,SAACC,GACT5K,GAASqE,QAAUuG,EAAEC,OAAOC,KAC9B,EACAN,YAAY,iBAIlB2B,KAAM,WACJhI,QAAQC,IAAIpE,IACZ,IAAM4Q,EAAmB5T,EAAU,GAC7B6T,EAAiB7T,EAAUA,EAAUuM,OAAS,GAE9CuH,EAAOC,KAAKC,MAAMC,eAAeC,QAAQ,SAG/CpH,EAAAA,EAAQqH,WAAWP,EAAiB7S,IAAK6S,EAAiB5S,KACvDsO,MAAK,SAAChJ,GACL,IAAM8N,EAAe9N,EAAS+N,QAAQ,GAAGC,kBAGzCxH,EAAAA,EAAQqH,WAAWN,EAAe9S,IAAK8S,EAAe7S,KACnDsO,MAAK,SAAChJ,GACL,IAAMiO,EAAajO,EAAS+N,QAAQ,GAAGC,kBAEjCE,EAAW,CACftC,KAAMlS,EACNkC,UAAWA,GACXI,QAASA,GACTkR,SAAUA,EACVY,aAAcA,EACdG,WAAYA,EACZE,OAAQX,EAAKvE,GACb3E,KAAM5H,GAASqE,SAGjBF,QAAQC,IAAI,WAAYoN,GAGxB3N,EAAAA,EAAMC,KAAK,GAADC,OAAInE,GAAM,kBAAkB4R,GACnClF,MAAK,SAAAhJ,GAEuB,MAAvBA,EAASW,KAAKC,MAChBC,QAAQC,IAAI,8CAA+Cd,EAASW,MAGtEE,QAAQC,IAAI,eAAiBd,EAASW,KAAKA,MAC3CnE,GAAYuE,QAAUf,EAASW,KAAKA,KAEbrG,EAAQiI,KAAI,SAAA6L,GAAI,OAAAlG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUkG,GAAI,IAAEC,OAAQrO,EAASW,KAAKA,MAAI,IAGlE2N,SAAQ,SAAAlM,GACrBvB,QAAQC,IAAIsB,GACZ7B,EAAAA,EAAMC,KAAK,GAADC,OAAInE,GAAM,oBAAoB8F,GACrC4G,MAAK,SAAAhJ,GACuB,MAAvBA,EAASW,KAAKC,MAChBC,QAAQC,IAAI,4CAA6Cd,EAASW,KAEtE,IACCuI,OAAM,SAAAnK,GACL8B,QAAQC,IAAI,4CAA6C/B,EAC3D,GACJ,IAIA,IAAM4K,EAAeE,SAASC,cAAc,kBACrBC,IAAYJ,EAAc,CAC/CK,SAAS,EACTC,YAAY,IACXjB,MAAK,SAACkB,GAEPA,EAAOW,QAAO,SAACC,GAEb,IAAMyD,EAAiB,IAAIxD,KAAK,CAACD,GAAO,iBAAkB,CAAE/E,KAAM,cAG5DhG,EAAW,IAAIM,SACrBN,EAASO,OAAO,aAAciO,GAE9BhO,EAAAA,EAAMC,KAAK,GAADC,OAAInE,GAAM,SAAAmE,OAAQjE,GAAYuE,QAAO,sBAAsBhB,GAClEiJ,MAAK,SAAAhJ,GACuB,MAAvBA,EAASW,KAAKC,KAChBC,QAAQC,IAAI,oCAAqCd,EAASW,MAE1DE,QAAQC,IAAI,8BAEhB,IACCoI,OAAM,SAAAnK,GACL8B,QAAQ9B,MAAM,8BAA+BA,EAC/C,GACJ,GAAG,YACL,GAuBF,IACCmK,OAAM,SAAAnK,GACL8B,QAAQ9B,MAAM,0CAA2CA,EAC3D,IAEFhB,GAAQmQ,EACV,IACChF,OAAM,SAACnK,GACN8B,QAAQ9B,MAAM,mCAAoCA,EACpD,GACJ,IACCmK,OAAM,SAACnK,GACN8B,QAAQ9B,MAAM,qCAAsCA,EACtD,GACJ,GAGJ,EAoQYqN,MAAMxI,EAAAA,EAAAA,KAAC4K,EAAAA,EAAY,IACnBzK,MAAO,CAAE0K,gBAAiB,aAAc9K,SACzC,UAIDC,EAAAA,EAAAA,KAACmJ,EAAAA,GAAM,CACLhH,KAAK,UACLiH,MAAM,QACNC,KAAK,QACLZ,QA7hBgB,WAC1B1S,EAAa,IACbY,EAAW,IACXR,GAAmB,GACnBI,GAAU,SAAAuU,GAAU,OAAIA,EAAa,CAAC,IACtC7N,QAAQC,IAAI,iBACd,EAwhBYsL,MAAMxI,EAAAA,EAAAA,KAAC+K,EAAAA,EAAkB,IACzB5K,MAAO,CAAE0K,gBAAiB,aAAc9K,SACzC,aAOLD,EAAAA,EAAAA,MAACkL,EAAAA,EAAYC,MAAK,CAAC7B,MAAM,SAASjJ,MAAO,CAAE+K,KAAM,IAAKnL,SAAA,EACpDC,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CACNrG,OACEhF,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4BACJD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,aAAW/I,EAAgBH,IAAI,QAClCiJ,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAY/I,EAAgBF,UAGnCsU,UAAU,QACV7V,MAAM,UAASwK,UAEfC,EAAAA,EAAAA,KAACgL,EAAAA,EAAW,CACVxC,MAAMxI,EAAAA,EAAAA,KAACqL,EAAAA,EAAe,SAI1BrL,EAAAA,EAAAA,KAACgL,EAAAA,EAAYM,QAAO,CAACC,iBAAkB,QAKzCzL,EAAAA,EAAAA,MAACkL,EAAAA,EAAYC,MAAK,CAAC7B,MAAM,SAASjJ,MAAO,CAAEqL,MAAO,GAAIC,IAAK,MAAOC,UAAW,oBAAqB3L,SAAA,CAC/F3I,IACC4I,EAAAA,EAAAA,KAACgL,EAAAA,EAAW,CACVxC,MAAMxI,EAAAA,EAAAA,KAAC2L,EAAAA,EAAoB,IAC3BC,QAAQ,aACRnD,QAAS9C,MAGX3F,EAAAA,EAAAA,KAACgL,EAAAA,EAAW,CACVxC,MAAMxI,EAAAA,EAAAA,KAAC6L,EAAAA,EAAW,IAClBD,QAAQ,aACRnD,QAAS9C,MAIb3F,EAAAA,EAAAA,KAACgL,EAAAA,EAAW,CACVxC,MAAMxI,EAAAA,EAAAA,KAACE,EAAAA,EAAY,IACnB0L,QAAQ,cACRnD,QArkBa,WACrB,IAAQ5R,EAAaG,EAAbH,IAAKC,EAAQE,EAARF,IAEb8N,EAAAA,EAAMC,QAAQ,CACZC,MAAO,mBACPC,SACEjF,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,0BAEHC,EAAAA,EAAAA,KAACmE,EAAAA,EAAO,CACN2H,gBAAgB,EAChBC,YAAY,EACZC,QAAS,EACTC,UAAU,QAAOlM,UAGjBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CACL1I,cAAeA,GACf6I,SAAS,iBACTC,UAAW1F,GACX2E,SAAUpD,GAAaN,SAGtBF,OAIK,kCAIVG,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CACPC,WAAS,EACTC,UAAW,IACXhD,MAAO,CAAE+L,MAAO,IAAK7I,aAAc,IACnCC,YAAY,2BACZG,SAAU,SAACC,GAAC,OAAK3K,GAAUoE,QAAUuG,EAAEC,OAAOC,KAAK,IACnD,aAGF5D,EAAAA,EAAAA,KAACmE,EAAAA,EAAO,CAAApE,UACNC,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CACLG,SAAS,eACT7I,cAAeiC,GACfwO,SAAUrN,GACV2E,SAAUpD,GAAaN,SAEtBhG,IAAWiG,EAAAA,EAAAA,KAAA,OAAKkE,IAAKnK,GAAU0K,IAAI,SAAStE,MAAO,CAAE8D,MAAO,UAAepE,UAMpFoF,KAAM,SAACC,GACLvI,EAAAA,EAAMiM,IAAI,GAAD/L,OAAInE,GAAM,cAAAmE,OAAa7D,GAAWmE,UACxCiI,MAAK,SAAChJ,GACL,GAA2B,MAAvBA,EAASW,KAAKC,KAAc,CAC9BC,QAAQC,IAAId,EAASW,KAAKA,MAC1B,IAAMiM,EAAc5M,EAASW,KAAKA,KAElCtD,GAAkB0D,QAAO,yBAAAN,OAA4BmM,GACrD/L,QAAQC,IAAIzD,GAAkB0D,SAE9B,IAAMiP,EAAmB,CACvBlN,IAAKzF,GAAkB0D,QACvBkP,WAAY,IAAIC,OAAOC,KAAKC,KAAK,GAAI,KAIvCvP,QAAQC,IAAI,eAAO7D,GAAgB8D,SACnC,IAAMsP,EAAY,CAChBpE,UAAWxR,EACXyR,UAAWxR,EACXqL,KAAM,SACN+G,SAAU9G,KAAKsK,MACfhM,KAAMlI,GACNgL,KAAMzK,GAAUoE,QAChB+B,IAAKkN,EACL5D,KAAMxP,GAAWmE,QACjBsN,OAAQ,GACR/L,QAASrF,GAAgB8D,SAG3BF,QAAQC,IAAIuP,GAEZ9V,GAAW,SAAC4F,GAAI,SAAAM,QAAAqB,EAAAA,EAAAA,GAAS3B,GAAI,CAAEkQ,GAAY,IAC3ChU,GAAcD,GAAa,GAC3ByE,QAAQC,IAAI,2BAEd,MACED,QAAQC,IAAI,iBAEhB,IACCoI,OAAM,SAACnK,GACN8B,QAAQ9B,MAAM,4BAA6BA,EAC7C,IAGF+J,GACF,IAIF9L,GAAgB,IAChBC,GAAgB8D,QAAU,EAC5B,EA8dUwP,UAAWzW,KAGb8J,EAAAA,EAAAA,KAACgL,EAAAA,EAAW,CACVxC,MAAMxI,EAAAA,EAAAA,KAAC4M,EAAAA,EAAa,IACpBhB,QAAQ,QACRnD,QAvLe,WAEvB1S,EAAa,IACbY,EAAW,IACX8B,GAAc,GACdlC,EAAU,GACV8D,GAAiB,GACnB,EAiLUsS,SAAUzW,KAGZ8J,EAAAA,EAAAA,KAACgL,EAAAA,EAAW,CACVxC,MAAMxI,EAAAA,EAAAA,KAAC6M,EAAAA,EAAgB,IACvBjB,QAAQ,kBACRnD,QAAS7C,GACT+G,SAAUhN,MAGZK,EAAAA,EAAAA,KAACgL,EAAAA,EAAW,CACVxC,MAAMxI,EAAAA,EAAAA,KAAC8M,EAAAA,EAAgB,IACvBlB,QAAQ,QACRnD,QAAS5B,GACT8F,SAAUhN,cA7IEK,EAAAA,EAAAA,KAAA,OAAAD,SAAK,aAqJ7B,C","sources":["views/mapStyles.js","views/Map.js"],"sourcesContent":["export const darkMode = {\n    fullscreenControl: false,\n    streetViewControl: false,\n    styles: [\n      { elementType: \"geometry\", stylers: [{ color: \"#242f3e\" }] },\n      { elementType: \"labels.text.stroke\", stylers: [{ color: \"#242f3e\" }] },\n      { elementType: \"labels.text.fill\", stylers: [{ color: \"#746855\" }] },\n      { featureType: \"administrative.locality\", elementType: \"labels.text.fill\", stylers: [{ color: \"#d59563\" }] },\n      { featureType: \"poi\", elementType: \"labels.text.fill\", stylers: [{ color: \"#d59563\" }] },\n      { featureType: \"poi.park\", elementType: \"geometry\", stylers: [{ color: \"#263c3f\" }] },\n      { featureType: \"poi.park\", elementType: \"labels.text.fill\", stylers: [{ color: \"#6b9a76\" }] },\n      { featureType: \"road\", elementType: \"geometry\", stylers: [{ color: \"#38414e\" }] },\n      { featureType: \"road\", elementType: \"geometry.stroke\", stylers: [{ color: \"#212a37\" }] },\n      { featureType: \"road\", elementType: \"labels.text.fill\", stylers: [{ color: \"#9ca5b3\" }] },\n      { featureType: \"road.highway\", elementType: \"geometry\", stylers: [{ color: \"#746855\" }] },\n      { featureType: \"road.highway\", elementType: \"geometry.stroke\", stylers: [{ color: \"#1f2835\" }] },\n      { featureType: \"road.highway\", elementType: \"labels.text.fill\", stylers: [{ color: \"#f3d19c\" }] },\n      { featureType: \"transit\", elementType: \"geometry\", stylers: [{ color: \"#2f3948\" }] },\n      { featureType: \"transit.station\", elementType: \"labels.text.fill\", stylers: [{ color: \"#d59563\" }] },\n      { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#17263c\" }] },\n      { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#515c6d\" }] },\n      { featureType: \"water\", elementType: \"labels.text.stroke\", stylers: [{ color: \"#17263c\" }] },\n    ],\n};","import { useState, useEffect, useRef } from 'react';\r\nimport { GoogleMap, useLoadScript, MarkerF, PolylineF } from '@react-google-maps/api';\r\nimport '../App.css';\r\nimport { FloatButton, Button, Tooltip, Modal, Upload, Input, message, Image } from 'antd';\r\nimport { useContext } from 'react';\r\nimport SavedPathsContext from '../SavedPathsContext';\r\nimport { ThemeContext } from '../App';\r\nimport { PlayCircleOutlined, StopOutlined, CompassOutlined, EyeOutlined, EyeInvisibleOutlined, PlusOutlined, ClearOutlined, DownloadOutlined, ShareAltOutlined } from '@ant-design/icons';\r\nimport html2canvas from 'html2canvas';\r\nimport Geocode from \"react-geocode\";\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport ImgCrop from 'antd-img-crop'\r\nimport TextArea from 'antd/es/input/TextArea';\r\nimport { darkMode } from './mapStyles';\r\nimport { RcFile, UploadProps } from 'antd/es/upload';\r\nimport { UploadFile } from 'antd/es/upload/interface';\r\n\r\nexport default function Map() {\r\n  const [positions, setPositions] = useState([]);\r\n  const [trackingEnabled, setTrackingEnabled] = useState(false); // State to track whether geolocation tracking is enabled\r\n  const [pathId, setPathId] = useState(0);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [currentPosition, setCurrentPositions] = useState({ lat: null, lng: null });\r\n  const [isPathsVisible, setIsPathsVisible] = useState(true);\r\n  const [mapCenter, setMapCenter] = useState(null);\r\n  const [mapZoom, setMapZoom] = useState(14);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [endTime, setEndTime] = useState(null);\r\n  const [markerName, setMarkerName] = useState(1);\r\n\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n  const savedPathId = useRef(\"\");\r\n  const pathName = useRef(\"\");\r\n  const inputText = useRef(\"\");\r\n  const markerIcon = useRef(\"\");\r\n  const markerPicture = useRef(\"\");\r\n  const [pictureGroup, setPictureGroup] = useState([]);\r\n  const pictureGroupRef = useRef([]);\r\n  const [pictureDataGroup, setPictureDataGroup] = useState([]);\r\n\r\n\r\n  // State to store the user's avatarUrl\r\n  const markerIconDataUrl = useRef(\"\");\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [imageUrl, setImageUrl] = useState();\r\n\r\n  const { addPath, displayedPath, setDisplayedPath } = useContext(SavedPathsContext);\r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  const getBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = (error) => reject(error);\r\n    });\r\n  };\r\n\r\n  const [previewOpen, setPreviewOpen] = useState(false);\r\n  const [previewImage, setPreviewImage] = useState(\"\");\r\n\r\n  const handleCancel = () => setPreviewOpen(false);\r\n\r\n  const customRequest = async ({ file, onSuccess, onError }) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      // Change the URL to your backend endpoint that handles the icon upload\r\n      const response = await axios.post(`${apiUrl}/api/upload-icon`, formData);\r\n      if (response.data.code === '0') {\r\n        // Save the file URL or file ID returned by the backend in your state or user profile\r\n        console.log('Icon uploaded successfully:', response.data);\r\n        console.log(response.data.data)\r\n        markerIcon.current = response.data.data; // icon's objectID\r\n        console.log(markerIcon.current)\r\n        onSuccess();\r\n      } else {\r\n        onError(new Error('Failed to upload icon'));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading icon:', error);\r\n      onError(error);\r\n    }\r\n  };\r\n\r\n  // 监听每一个marker的图片数组\r\n  useEffect(() => {\r\n    console.log(pictureGroup);\r\n\r\n  }, [pictureGroup]);\r\n\r\n  const customPictureRequest = async ({ file, onSuccess, onError }) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      // Change the URL to your backend endpoint that handles the picture upload\r\n      const response = await axios.post(`${apiUrl}/api/upload-picture`, formData);\r\n      if (response.data.code === '0') {\r\n        // Save the file URL or file ID returned by the backend in your state or user profile\r\n        console.log('Picture uploaded successfully:', response.data);\r\n        console.log(response.data.data);\r\n        const pictureObjectID = response.data.data; // picture's objectID\r\n        setPictureGroup((prev) => {\r\n          const newPictureGroup = [...prev, pictureObjectID];\r\n          pictureGroupRef.current = newPictureGroup; // 更新引用\r\n          return newPictureGroup;\r\n        });\r\n\r\n        onSuccess();\r\n      } else {\r\n        onError(new Error('Failed to upload picture'));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading picture:', error);\r\n      onError(error);\r\n    }\r\n  };\r\n\r\n  const customPictureRequestForClickedMarker = async ({ file, onSuccess, onError, marker }) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      const response = await axios.post(`${apiUrl}/api/upload-picture`, formData);\r\n      if (response.data.code === '0') {\r\n        console.log('Picture uploaded successfully:', response.data);\r\n        const pictureObjectID = response.data.data; // picture's objectID\r\n        // Add the objectID to the marker's picture array\r\n        marker.picture = [...marker.picture, pictureObjectID];\r\n\r\n        // Then update the marker in the markers array\r\n        setMarkers(markers.map(m => m === marker ? marker : m));\r\n\r\n        // Then update the marker in the database\r\n        await axios.post(`${apiUrl}/api/update-marker`, marker);\r\n\r\n        onSuccess();\r\n      } else {\r\n        onError(new Error('Failed to upload picture'));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading picture:', error);\r\n      onError(error);\r\n    }\r\n  };\r\n\r\n  const handlePreview = async (file) => {\r\n    if (!file.url && !file.preview) {\r\n      file.preview = await getBase64(file.originFileObj);\r\n    }\r\n\r\n    setPreviewImage(file.url || file.preview);\r\n    setPreviewOpen(true);\r\n  };\r\n\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n  });\r\n\r\n  const [isTakingScreenshot, setIsTakingScreenshot] = useState(false);\r\n\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n      <div style={{ marginTop: 8 }}>Upload</div>\r\n    </div>\r\n  );\r\n\r\n\r\n  const handleChange = (info) => {\r\n    if (info.file.status === 'done') {\r\n      message.success(`${info.file.name} uploaded successfully`);\r\n    } else if (info.file.status === 'error') {\r\n      message.error(`${info.file.name} upload failed.`);\r\n    }\r\n  };\r\n\r\n\r\n  function getLocation() {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          resolve({ latitude, longitude });\r\n        },\r\n        (error) => {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n\r\n  async function getAvgLocation(pathId) {\r\n\r\n    await new Promise((resolve) => {\r\n      setTimeout(function () {\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n\r\n    const { latitude: firstLat, longitude: firstLng } = await getLocation();\r\n    console.log({ firstLat, firstLng });\r\n\r\n    await new Promise((resolve) => {\r\n      setTimeout(function () {\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n\r\n    const { latitude: secondLat, longitude: secondLng } = await getLocation();\r\n    console.log({ secondLat, secondLng });\r\n\r\n    await new Promise((resolve) => {\r\n      setTimeout(function () {\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n\r\n    const { latitude: thirdLat, longitude: thirdLng } = await getLocation();\r\n    console.log({ thirdLat, thirdLng });\r\n\r\n    const position = {\r\n      latitude: (firstLat + secondLat + thirdLat) / 3.0,\r\n      longitude: (firstLng + secondLng + thirdLng) / 3.0\r\n    }\r\n\r\n    setPositions((prev) => [...prev, { lat: position.latitude, lng: position.longitude, type: \"default\", pathId }]);\r\n    setCurrentPositions({ lat: position.latitude, lng: position.longitude });\r\n\r\n    console.log(position);\r\n    setEndTime(new Date()); // Save the end time\r\n  }\r\n\r\n\r\n  // Get the user's current location\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          // Set the default map center to the user's current location\r\n          setMapCenter({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          });\r\n        },\r\n        (error) => {\r\n          console.error(\"Error retrieving geolocation:\", error);\r\n          // If can't get the user's current location, the set to a default location\r\n          setMapCenter({ lat: 40.7128, lng: -74.0060 }); // Anywhere can be changed later\r\n        }\r\n      );\r\n    } else {\r\n      // If the web browser doesn't support geolocation, also set a default center\r\n      setMapCenter({ lat: 40.7128, lng: -74.0060 });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (displayedPath && displayedPath.length > 0) {\r\n      // If there is a path to display, set the center point of the map to the first point of the displayed path\r\n      setMapCenter(displayedPath[0]);\r\n      setMapZoom(15);\r\n    } else if (positions.length > 0) {\r\n      // If there is no path to display, but is under tracking, set the center point of the map as the last tracked point\r\n      setMapCenter(positions[positions.length - 1]);\r\n    }\r\n    // If the geolocation cannot be obtained or there is no path being tracked, keep the center point unchanged\r\n  }, [displayedPath, positions]);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n\r\n    if (trackingEnabled) {\r\n      setStartTime(new Date()); // Save the start time\r\n      // Immediately get the current location\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setPositions((prev) => [...prev, { lat: latitude, lng: longitude, type: \"default\", pathId }]);\r\n          setCurrentPositions({ lat: latitude, lng: longitude });\r\n          console.log(\"Got first location after click the button\");\r\n        },\r\n        (error) => {\r\n          console.error('Error retrieving geolocation:', error);\r\n        }\r\n      );\r\n\r\n      // Start tracking location every 10 seconds\r\n      interval = setInterval(async () => {\r\n        console.log(\"Start Marking\");\r\n        await getAvgLocation(pathId);\r\n        console.log(\"Get a location\");\r\n        console.log(pathId);\r\n\r\n      }, 8000);\r\n    }\r\n\r\n    // Cleanup function to clear interval when component unmounts\r\n    return () => clearInterval(interval);\r\n  }, [trackingEnabled, pathId]);\r\n\r\n  const handleStartTracking = () => {\r\n    setPositions([]); // clear positions before a new tracking\r\n    setMarkers([]);\r\n    setTrackingEnabled(true);\r\n    setPathId(prevPathId => prevPathId + 1); // 使用回调函数更新 pathId\r\n    console.log(\"Start tracking\");\r\n  };\r\n\r\n\r\n  //TODO\r\n  const handleAddPoint = () => {\r\n    const { lat, lng } = currentPosition;\r\n\r\n    Modal.confirm({\r\n      title: 'Set a New Marker',\r\n      content: (\r\n        <div>\r\n          Choose an unique icon:\r\n          <ImgCrop\r\n            rotationSlider={true}\r\n            zoomSlider={true}\r\n            quality={1}\r\n            cropShape='round'\r\n          >\r\n\r\n            <Upload\r\n              customRequest={customRequest}\r\n              listType=\"picture-circle\"\r\n              onPreview={handlePreview}\r\n              onChange={handleChange}\r\n\r\n            >\r\n              {uploadButton}\r\n\r\n            </Upload>\r\n\r\n          </ImgCrop>\r\n\r\n          Type something at this moment:\r\n\r\n          <TextArea\r\n            showCount\r\n            maxLength={200}\r\n            style={{ heght: 250, marginBottom: 24 }}\r\n            placeholder=\"It is memorable that ...\"\r\n            onChange={(e) => inputText.current = e.target.value}\r\n          />\r\n\r\n          Pictures:\r\n          <ImgCrop>\r\n            <Upload\r\n              listType=\"picture-card\"\r\n              customRequest={customPictureRequest}\r\n              onPreiew={handlePreview}\r\n              onChange={handleChange}\r\n            >\r\n              {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n            </Upload>\r\n          </ImgCrop>\r\n\r\n        </div>\r\n      ),\r\n      onOk: (close) => {\r\n        axios.get(`${apiUrl}/api/icon/${markerIcon.current}`)\r\n          .then((response) => {\r\n            if (response.data.code === '0') {\r\n              console.log(response.data.data);\r\n              const imageBase64 = response.data.data;\r\n              // Set the userAvatarUrl state with the fetched avatar data\r\n              markerIconDataUrl.current = `data:image/png;base64,${imageBase64}`;\r\n              console.log(markerIconDataUrl.current)\r\n\r\n              const customMarkerIcon = {\r\n                url: markerIconDataUrl.current, // your base64 data url\r\n                scaledSize: new google.maps.Size(64, 64) // the size you want to scale to\r\n              };\r\n\r\n\r\n              console.log(\"现在\" + pictureGroupRef.current)\r\n              const newMarker = {\r\n                markerLat: lat,\r\n                markerLng: lng,\r\n                type: \"custom\",\r\n                markerID: Date.now(), // Assign a unique ID to the marker\r\n                name: markerName,\r\n                text: inputText.current,\r\n                url: customMarkerIcon, // Only for display, will not stored in database\r\n                icon: markerIcon.current,\r\n                pathID: \"\",\r\n                picture: pictureGroupRef.current\r\n              };\r\n\r\n              console.log(newMarker);\r\n\r\n              setMarkers((prev) => [...prev, newMarker]);\r\n              setMarkerName(markerName + 1);\r\n              console.log(\"Add an information point\");\r\n\r\n            } else {\r\n              console.log(\"Icon not found\");\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching icon data:', error);\r\n          });\r\n\r\n\r\n        close();\r\n      },\r\n    });\r\n\r\n    // 清空图片集\r\n    setPictureGroup([]);\r\n    pictureGroupRef.current = [];\r\n  };\r\n\r\n  Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\r\n\r\n  const handleStopTracking = () => {\r\n    setTrackingEnabled(false);\r\n    console.log(\"Stop tracking\");\r\n\r\n    const duration = (endTime - startTime) / 1000; // Calculate the duration in seconds\r\n    if (duration < 10) {\r\n      Modal.warning({\r\n        centered: true,\r\n        title: 'Warning',\r\n        content: 'The path is less than 10 seconds long and will not be saved.',\r\n      });\r\n      return;\r\n    }\r\n\r\n    Modal.confirm({\r\n      centered: true,\r\n      title: 'Do you want to save this path?',\r\n      content: (\r\n        <div>\r\n          <p>Enter a name for the path:</p>\r\n          <Input\r\n            onChange={(e) => {\r\n              pathName.current = e.target.value;\r\n            }}\r\n            placeholder=\"Path name\"\r\n          />\r\n        </div>\r\n      ),\r\n      onOk: () => {\r\n        console.log(pathName);\r\n        const startCoordinates = positions[0];\r\n        const endCoordinates = positions[positions.length - 1];\r\n        // Get the user info stored in sessionStorage\r\n        const user = JSON.parse(sessionStorage.getItem(\"user\"));\r\n\r\n        // 使用逆地理编码服务获取开始点的地址\r\n        Geocode.fromLatLng(startCoordinates.lat, startCoordinates.lng)\r\n          .then((response) => {\r\n            const startAddress = response.results[0].formatted_address;\r\n\r\n            // 使用逆地理编码服务获取结束点的地址\r\n            Geocode.fromLatLng(endCoordinates.lat, endCoordinates.lng)\r\n              .then((response) => {\r\n                const endAddress = response.results[0].formatted_address;\r\n\r\n                const pathData = {\r\n                  path: positions,\r\n                  startTime: startTime,\r\n                  endTime: endTime,\r\n                  duration: duration,\r\n                  startAddress: startAddress,\r\n                  endAddress: endAddress,\r\n                  userid: user.id,\r\n                  name: pathName.current,\r\n                };\r\n\r\n                console.log(\"PathData\", pathData);\r\n\r\n                //send pathData to back end\r\n                axios.post(`${apiUrl}/api/path-data`, pathData)\r\n                  .then(response => {\r\n                    // Check the response code\r\n                    if (response.data.code === '0') {\r\n                      console.log('Path data successfully sent to the backend:', response.data);\r\n                    }\r\n                    // Get pathId from back end\r\n                    console.log(\"path ID is: \" + response.data.data);\r\n                    savedPathId.current = response.data.data;\r\n\r\n                    const updatedMarkers = markers.map(item => ({ ...item, pathID: response.data.data }))\r\n\r\n                    // send markerData to back end\r\n                    updatedMarkers.forEach(marker => {\r\n                      console.log(marker)\r\n                      axios.post(`${apiUrl}/api/marker-data`, marker)\r\n                        .then(response => {\r\n                          if (response.data.code === '0') {\r\n                            console.log('Marker data successfully sent to backend:', response.data);\r\n                          }\r\n                        })\r\n                        .catch(error => {\r\n                          console.log('Error sending marker data to the backend:', error);\r\n                        });\r\n                    })\r\n\r\n\r\n                    // Generate the screenshot\r\n                    const mapContainer = document.querySelector('.map-container');\r\n                    const screenshotBlob = html2canvas(mapContainer, {\r\n                      useCORS: true,\r\n                      allowTaint: true,\r\n                    }).then((canvas) => {\r\n                      // Convert the canvas to a blob\r\n                      canvas.toBlob((blob) => {\r\n                        // Create a File object from the blob\r\n                        const screenshotFile = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n\r\n                        // Continue with your code to upload the screenshot\r\n                        const formData = new FormData();\r\n                        formData.append('screenshot', screenshotFile);\r\n\r\n                        axios.post(`${apiUrl}/api/${savedPathId.current}/upload-screenshot`, formData)\r\n                          .then(response => {\r\n                            if (response.data.code === '0') {\r\n                              console.log('Screenshot uploaded successfully:', response.data);\r\n                            } else {\r\n                              console.log('Screenshot uploaded failed:');\r\n                            }\r\n                          })\r\n                          .catch(error => {\r\n                            console.error('Error uploading Screenshot:', error);\r\n                          });\r\n                      }, 'image/png');\r\n                    });\r\n\r\n                    // // Convert the screenshot to a File object\r\n                    // const screenshotFile = new File([screenshotBlob], 'screenshot.png', { type: 'image/png' });\r\n\r\n                    // // Change the URL to your backend endpoint that handles the avatar upload\r\n                    // const formData = new FormData();\r\n                    // formData.append('screenshot', screenshotFile);\r\n\r\n                    // // Use .then() to handle the response\r\n                    // axios.post(`${apiUrl}/api/${savedPathId.current}/upload-screenshot`, formData)\r\n                    //   .then(response => {\r\n                    //     if (response.data.code === '0') {\r\n                    //       // Save the file URL or file ID returned by the backend\r\n                    //       console.log('Screenshot uploaded successfully:', response.data);\r\n                    //     } else {\r\n                    //       console.log('Screenshot uploaded failed:');\r\n                    //     }\r\n                    //   })\r\n                    //   .catch(error => {\r\n                    //     console.error('Error uploading Screenshot:', error);\r\n                    //   });\r\n\r\n                  })\r\n                  .catch(error => {\r\n                    console.error('Error sending path data to the backend:', error);\r\n                  });\r\n                //save pathData at front end\r\n                addPath(pathData);\r\n              })\r\n              .catch((error) => {\r\n                console.error(\"Error geocoding end coordinates:\", error);\r\n              });\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error geocoding start coordinates:\", error);\r\n          });\r\n      },\r\n      // No action on cancel, as we just close the modal\r\n    });\r\n  };\r\n\r\n\r\n  // TODO\r\n  const handleMarkerClick = (marker) => {\r\n    console.log(\"marker text is:\" + marker.text);\r\n\r\n    // 预先加载图片数据\r\n    const promises = marker.picture.map(pictureID => {\r\n      return axios.get(`${apiUrl}/api/picture/${pictureID}`)\r\n        .then((response) => {\r\n          if (response.data.code === '0') {\r\n            return response.data.data;\r\n          } else {\r\n            console.log(\"Picture not found\");\r\n            return null;\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching picture data:', error);\r\n          return null;\r\n        });\r\n    });\r\n\r\n    // 等待所有图片数据加载完成后再打开 Modal\r\n    Promise.all(promises)\r\n      .then((imageBase64Array) => {\r\n        // 过滤掉加载失败的图片数据\r\n        const filteredImageBase64Array = imageBase64Array.filter(imageBase64 => imageBase64 !== null);\r\n        setPictureDataGroup(filteredImageBase64Array);\r\n        // 打开 Modal\r\n        openModal(marker, filteredImageBase64Array);\r\n      });\r\n  };\r\n\r\n\r\n  const MarkerModalContent = ({\r\n    marker,\r\n    pictureDataGroup,\r\n    inputText,\r\n    trackingEnabled,\r\n  }) => {\r\n    return (\r\n      <div>\r\n        {trackingEnabled ?\r\n          (<div>\r\n            Comment:\r\n            <br></br>\r\n            {inputText.current}\r\n          </div>\r\n          ) :\r\n          (\r\n            <div>\r\n              Do you want to add something new?\r\n              <TextArea\r\n                showCount\r\n                maxLength={200}\r\n                style={{ height: 250, marginBottom: 24 }}\r\n                placeholder=\"Input something...\"\r\n                defaultValue={marker.text}\r\n                onChange={(e) => inputText.current = e.target.value}\r\n              />\r\n            </div>\r\n          )}\r\n        <br></br>\r\n        Pictures:\r\n        <div>\r\n          <Image.PreviewGroup\r\n            preview={{\r\n              onChange: (current, prev) => console.log(`current index: ${current}, prev index: ${prev}`),\r\n            }}\r\n          >\r\n            {pictureDataGroup.map((pictureData, index) => (\r\n              <Image key={index} width={100} src={`data:image/png;base64,${pictureData}`} />\r\n            ))}\r\n          </Image.PreviewGroup>\r\n        </div>\r\n\r\n        {!trackingEnabled &&\r\n          <ImgCrop>\r\n            <Upload\r\n              customRequest={(params) => customPictureRequestForClickedMarker({ ...params, marker })}\r\n              listType=\"picture-card\"\r\n              onPreview={handlePreview}\r\n              onChange={handleChange}\r\n            >\r\n              {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n            </Upload>\r\n          </ImgCrop>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const openModal = (marker, imageBase64Array) => {\r\n    Modal.confirm({\r\n      title: 'The marker you left in this place',\r\n      content: <MarkerModalContent\r\n        key={new Date().getTime()} // 强制更新\r\n        marker={marker}\r\n        pictureDataGroup={imageBase64Array}\r\n        inputText={inputText}\r\n        trackingEnabled={trackingEnabled} // 确保您传递了trackingEnabled\r\n      // ... 其他props ...\r\n      />,\r\n      onOk: (close) => {\r\n        if (trackingEnabled) {\r\n          close();\r\n          return; // 如果在路径记录状态，直接返回，不执行后续代码\r\n        }\r\n        const updatedMarker = {\r\n          ...marker, // 获取原始marker的所有属性\r\n          text: inputText.current // 更新 text 属性\r\n        };\r\n\r\n        // 更新数据库\r\n        axios.post(`${apiUrl}/api/update-marker`, updatedMarker)\r\n          .then(response => {\r\n            if (response.data.code === '0') {\r\n              console.log(\"Marker updated successfully in database\");\r\n\r\n              // 更新前端的 state\r\n              setMarkers(markers.map(m => m.id === marker.id ? updatedMarker : m));\r\n            } else {\r\n              console.log(\"Error updating marker in database:\", response.data.message);\r\n            }\r\n            close();\r\n          })\r\n          .catch(error => {\r\n            console.error(\"Error sending request to update marker:\", error);\r\n            close();\r\n          });\r\n      },\r\n    });\r\n  };\r\n\r\n\r\n\r\n  // Group positions by pathId\r\n  const positionByPathId = positions.reduce((acc, position) => {\r\n    (acc[position.pathId] = acc[position.pathId] || []).push(position);\r\n    return acc;\r\n  }, {});\r\n\r\n  const handleClearPaths = () => {\r\n    // setClearedPaths(positions);\r\n    setPositions([]);\r\n    setMarkers([]);\r\n    setMarkerName(1);\r\n    setPathId(0);\r\n    setDisplayedPath([]);\r\n  }\r\n\r\n  const togglePathsVisibility = () => {\r\n    setIsPathsVisible(!isPathsVisible);\r\n  };\r\n\r\n\r\n\r\n  const handleScreenshot = async () => {\r\n    setIsTakingScreenshot(true);\r\n\r\n    const mapContainer = document.querySelector('.map-container');\r\n\r\n    html2canvas(mapContainer, { useCORS: true, allowTaint: true }).then((canvas) => {\r\n      const link = document.createElement('a');\r\n      link.href = canvas.toDataURL('image/png');\r\n      link.download = 'screenshot.png';\r\n      link.click();\r\n\r\n      setIsTakingScreenshot(false);\r\n    });\r\n  };\r\n\r\n  const handleShareScreenshot = async () => {\r\n    setIsTakingScreenshot(true);\r\n\r\n    const mapContainer = document.querySelector('.map-container');\r\n\r\n    html2canvas(mapContainer, { useCORS: true, allowTaint: true }).then((canvas) => {\r\n      const blob = canvas.toBlob((blob) => {\r\n        if (blob) {\r\n          const file = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n\r\n          if (navigator.share) {\r\n            // Share the screenshot using the Web Share API\r\n            navigator.share({\r\n              files: [file],\r\n            });\r\n          } else {\r\n            console.error('Web Share API not supported.');\r\n          }\r\n        } else {\r\n          console.error('Failed to generate screenshot blob.');\r\n        }\r\n\r\n        setIsTakingScreenshot(false);\r\n      });\r\n    });\r\n  };\r\n\r\n  if (!isLoaded) return <div>Loading..</div>\r\n\r\n  return (\r\n    /*global google*/\r\n    <div className=\"map-view\">\r\n      <div className=\"map-container\">\r\n        <GoogleMap\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n          mapContainerClassName=\"map-container\"\r\n          options={{\r\n            fullscreenControl: false,\r\n            streetViewControl: false,\r\n            ...theme === 'default' ? {} : darkMode,\r\n          }}\r\n        >\r\n          {isPathsVisible && Object.values(positionByPathId).map((pathPositions, index) => (\r\n            <PolylineF\r\n              key={index}\r\n              path={pathPositions}\r\n              options={{\r\n                strokeColor: '#0000FF',\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 5,\r\n              }}\r\n            />\r\n          ))}\r\n\r\n          {displayedPath && isPathsVisible && ( // Display the saved path\r\n            <PolylineF\r\n              path={displayedPath}\r\n              options={{\r\n                strokeColor: '#FF0000',\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 5,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {markers.map(marker => (\r\n            <MarkerF\r\n              key={marker.markerID}\r\n              position={{ lat: marker.markerLat, lng: marker.markerLng }}\r\n              visible={marker.type === 'custom'}\r\n              icon={marker.url}\r\n\r\n              onClick={() => handleMarkerClick(marker)}\r\n            />\r\n          ))}\r\n        </GoogleMap>\r\n\r\n        {/* Main start/stop button */}\r\n        <div className='map-view-start-stop-button'>\r\n          {trackingEnabled ? (\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size=\"large\"\r\n              onClick={handleStopTracking}\r\n              icon={<StopOutlined />}\r\n              style={{ backgroundColor: 'OrangeRed' }}\r\n            >\r\n              STOP\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size=\"large\"\r\n              onClick={handleStartTracking}\r\n              icon={<PlayCircleOutlined />}\r\n              style={{ backgroundColor: 'LimeGreen' }}\r\n            >\r\n              START\r\n            </Button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Text location information and back to top button*/}\r\n        <FloatButton.Group shape=\"circle\" style={{ left: 24 }}>\r\n          <Tooltip\r\n            title={\r\n              <div>\r\n                <h1>Your current location:</h1>\r\n                <p>Latitude: {currentPosition.lat} </p>\r\n                <p>Longitude: {currentPosition.lng}</p>\r\n              </div>\r\n            }\r\n            placement='right'\r\n            color='#87d068'\r\n          >\r\n            <FloatButton\r\n              icon={<CompassOutlined />}\r\n            />\r\n          </Tooltip>\r\n\r\n          <FloatButton.BackTop visibilityHeight={0} />\r\n        </FloatButton.Group>\r\n\r\n\r\n        {/* Functional buttons group */}\r\n        <FloatButton.Group shape=\"circle\" style={{ right: 50, top: '60%', transform: 'translateY(-50%)' }}>\r\n          {isPathsVisible ? (\r\n            <FloatButton\r\n              icon={<EyeInvisibleOutlined />}\r\n              tooltip='Hide Paths'\r\n              onClick={togglePathsVisibility}\r\n            />\r\n          ) : (\r\n            <FloatButton\r\n              icon={<EyeOutlined />}\r\n              tooltip='Show Paths'\r\n              onClick={togglePathsVisibility}\r\n            />\r\n          )}\r\n\r\n          <FloatButton\r\n            icon={<PlusOutlined />}\r\n            tooltip='Add a Point'\r\n            onClick={handleAddPoint}\r\n            disabled={!trackingEnabled}\r\n          />\r\n\r\n          <FloatButton\r\n            icon={<ClearOutlined />}\r\n            tooltip='Clear'\r\n            onClick={handleClearPaths}\r\n            disabled={trackingEnabled}\r\n          />\r\n\r\n          <FloatButton\r\n            icon={<DownloadOutlined />}\r\n            tooltip=\"Take Screenshot\"\r\n            onClick={handleScreenshot}\r\n            disabled={isTakingScreenshot}\r\n          />\r\n\r\n          <FloatButton\r\n            icon={<ShareAltOutlined />}\r\n            tooltip=\"Share\"\r\n            onClick={handleShareScreenshot}\r\n            disabled={isTakingScreenshot}\r\n          />\r\n        </FloatButton.Group>\r\n\r\n      </div>\r\n\r\n    </div >\r\n  );\r\n}"],"names":["darkMode","fullscreenControl","streetViewControl","styles","elementType","stylers","color","featureType","Map","_useState","useState","_useState2","_slicedToArray","positions","setPositions","_useState3","_useState4","trackingEnabled","setTrackingEnabled","_useState5","_useState6","pathId","setPathId","_useState7","_useState8","markers","setMarkers","_useState9","lat","lng","_useState10","currentPosition","setCurrentPositions","_useState11","_useState12","isPathsVisible","setIsPathsVisible","_useState13","_useState14","mapCenter","setMapCenter","_useState15","_useState16","mapZoom","setMapZoom","_useState17","_useState18","startTime","setStartTime","_useState19","_useState20","endTime","setEndTime","_useState21","_useState22","markerName","setMarkerName","apiUrl","process","savedPathId","useRef","pathName","inputText","markerIcon","_useState23","_useState24","pictureGroup","setPictureGroup","pictureGroupRef","_useState25","_useState26","setPictureDataGroup","markerIconDataUrl","_useState27","_useState28","loading","_useState29","_useState30","imageUrl","_useContext","useContext","SavedPathsContext","addPath","displayedPath","setDisplayedPath","theme","ThemeContext","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","_useState31","_useState32","setPreviewOpen","_useState33","_useState34","setPreviewImage","customRequest","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","onSuccess","onError","formData","response","wrap","_context","prev","next","FormData","append","axios","post","concat","sent","data","code","console","log","current","Error","t0","stop","_x","apply","arguments","useEffect","customPictureRequest","_ref4","_callee2","_ref3","pictureObjectID","_context2","newPictureGroup","_toConsumableArray","_x2","customPictureRequestForClickedMarker","_ref6","_callee3","_ref5","marker","_context3","picture","map","m","_x3","handlePreview","_ref7","_callee4","_context4","url","preview","originFileObj","_x4","isLoaded","useLoadScript","googleMapsApiKey","_useState35","_useState36","isTakingScreenshot","setIsTakingScreenshot","uploadButton","_jsxs","children","_jsx","LoadingOutlined","PlusOutlined","style","marginTop","handleChange","info","status","message","success","name","getLocation","navigator","geolocation","getCurrentPosition","position","_position$coords","coords","latitude","longitude","getAvgLocation","_x5","_getAvgLocation","_callee8","_yield$getLocation","firstLat","firstLng","_yield$getLocation2","secondLat","secondLng","_yield$getLocation3","thirdLat","thirdLng","_context8","setTimeout","type","Date","length","interval","_position$coords2","setInterval","_callee5","_context5","clearInterval","Geocode","setApiKey","MarkerModalContent","_ref9","pictureDataGroup","TextArea","showCount","maxLength","height","marginBottom","placeholder","defaultValue","text","onChange","e","target","value","Image","PreviewGroup","pictureData","index","width","src","ImgCrop","Upload","params","_objectSpread","listType","onPreview","alt","openModal","imageBase64Array","Modal","confirm","title","content","getTime","onOk","close","updatedMarker","then","id","catch","positionByPathId","reduce","acc","push","togglePathsVisibility","handleScreenshot","_ref10","_callee6","mapContainer","_context6","document","querySelector","html2canvas","useCORS","allowTaint","canvas","link","createElement","href","toDataURL","download","click","handleShareScreenshot","_ref11","_callee7","_context7","toBlob","blob","File","share","files","className","GoogleMap","center","zoom","mapContainerClassName","options","Object","values","pathPositions","PolylineF","path","strokeColor","strokeOpacity","strokeWeight","MarkerF","markerLat","markerLng","visible","icon","onClick","promises","pictureID","get","all","filteredImageBase64Array","filter","imageBase64","handleMarkerClick","markerID","Button","shape","size","duration","warning","centered","Input","startCoordinates","endCoordinates","user","JSON","parse","sessionStorage","getItem","fromLatLng","startAddress","results","formatted_address","endAddress","pathData","userid","item","pathID","forEach","screenshotFile","StopOutlined","backgroundColor","prevPathId","PlayCircleOutlined","FloatButton","Group","left","Tooltip","placement","CompassOutlined","BackTop","visibilityHeight","right","top","transform","EyeInvisibleOutlined","tooltip","EyeOutlined","rotationSlider","zoomSlider","quality","cropShape","heght","onPreiew","customMarkerIcon","scaledSize","google","maps","Size","newMarker","now","disabled","ClearOutlined","DownloadOutlined","ShareAltOutlined"],"sourceRoot":""}