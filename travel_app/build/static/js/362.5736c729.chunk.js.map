{"version":3,"file":"static/js/362.5736c729.chunk.js","mappings":"6LA8FA,UAxFmB,WACjB,IAAQA,GAAWC,EAAAA,EAAAA,MAAXD,OACRE,GAAwBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA8BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA8BT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAnCE,EAAOD,EAAA,GAENE,GAFkBF,EAAA,IAELG,EAAAA,EAAAA,IAAc,CACjCC,iBAAkBC,4CADZH,UAIFI,EAASD,kCAEfE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAMC,IAAI,GAADC,OAAIJ,EAAM,eAAAI,OAAcvB,IAC9BwB,MAAK,SAAAC,GACJlB,EAAQkB,EAASC,KAAKA,MACtBC,QAAQC,IAAI,oCAAqCH,EAASC,KAAKA,KACjE,IACCG,OAAM,SAAAC,GACLH,QAAQG,MAAM,gCAAiCA,EACjD,IAEFT,EAAAA,EAAMC,IAAI,GAADC,OAAIJ,EAAM,sBAAAI,OAAqBvB,IACrCwB,MAAK,SAAAC,GACJE,QAAQC,IAAIH,EAASC,KAAKA,MAC1Bf,EAAWc,EAASC,KAAKA,MACzBC,QAAQC,IAAI,uCAAwCH,EAASC,KAAKA,KACpE,IACCG,OAAM,SAAAC,GACLH,QAAQG,MAAM,mCAAoCA,EACpD,GACJ,GAAG,CAAC9B,IAOJ,IAAKM,EACH,OAAOyB,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eAGd,IAAMC,EAAY,CAChBC,IAAK5B,EAAKA,KAAK,GAAG4B,IAClBC,IAAK7B,EAAKA,KAAK,GAAG6B,KAGdC,EAAY9B,EAAKA,KAEvB,OAAKS,GAGHsB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUN,SAAA,EACvBD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,6BACJK,EAAAA,EAAAA,MAAA,KAAAL,SAAA,CAAG,YAAU1B,EAAKiC,OAClBF,EAAAA,EAAAA,MAAA,KAAAL,SAAA,CAAG,kBAAgB1B,EAAKkC,iBACxBH,EAAAA,EAAAA,MAAA,KAAAL,SAAA,CAAG,gBAAc1B,EAAKmC,eACtBJ,EAAAA,EAAAA,MAAA,KAAAL,SAAA,CAAG,eAAa1B,EAAKoC,cACrBL,EAAAA,EAAAA,MAAA,KAAAL,SAAA,CAAG,aAAW1B,EAAKqC,YACnBZ,EAAAA,EAAAA,KAAA,OAAKO,UAAU,gBAAeN,UAC9BK,EAAAA,EAAAA,MAACO,EAAAA,GAAS,CACNC,OAAQZ,EACRa,KAAMhC,EACNiC,sBAAsB,gBAAef,SAAA,EAErCD,EAAAA,EAAAA,KAACiB,EAAAA,GAAS,CACR1C,KAAM8B,EACNa,QAAS,CACPC,YAAa,UACbC,cAAe,EACfC,aAAc,KAIjB1C,EAAQ2C,KAAI,SAACC,EAAQC,GAAK,OACzBxB,EAAAA,EAAAA,KAACyB,EAAAA,GAAO,CAENC,SAAU,CAAEvB,IAAKoB,EAAOI,UAAWvB,IAAKmB,EAAOK,WAC/CC,KAAMN,EAAOM,KACbC,QAAS,WAA+B,GAHnCP,EAIL,aA/BUvB,EAAAA,EAAAA,KAAA,OAAAC,SAAK,aAqC7B,C","sources":["views/Share.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { GoogleMap, useLoadScript, MarkerF, PolylineF } from '@react-google-maps/api';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport '../App.css';\r\n\r\nconst SharedPage = () => {\r\n  const { pathId } = useParams();\r\n  const [path, setPath] = useState(null);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [mapZoom, setMapZoom] = useState(15);\r\n\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n  });\r\n\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n  useEffect(() => {\r\n    axios.get(`${apiUrl}/api/share/${pathId}`)\r\n      .then(response => {\r\n        setPath(response.data.data);\r\n        console.log(\"Successfully retrive shared path:\", response.data.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error retrieving shared path:', error);\r\n      });\r\n    // get markers binded with the path\r\n    axios.get(`${apiUrl}/api/share/marker/${pathId}`)\r\n      .then(response => {\r\n        console.log(response.data.data);\r\n        setMarkers(response.data.data);\r\n        console.log(\"Successfully retrive shared markers:\", response.data.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error retrieving shared markers:', error);\r\n      });\r\n  }, [pathId]);\r\n\r\n  // TODO\r\n  const handleMarkerClick = (marker) => {\r\n\r\n  };\r\n\r\n  if (!path) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const mapCenter = {\r\n    lat: path.path[0].lat,\r\n    lng: path.path[0].lng,\r\n  };\r\n\r\n  const pathArray = path.path;\r\n\r\n  if (!isLoaded) return <div>Loading..</div>\r\n\r\n  return (\r\n    <div className=\"map-view\">\r\n      <h1>Shared Path Information</h1>\r\n      <p>Path ID: {path.id}</p>\r\n      <p>Start Address: {path.startAddress}</p>\r\n      <p>End Address: {path.endAddress}</p>\r\n      <p>Start Time: {path.startTime}</p>\r\n      <p>End Time: {path.endTime}</p>\r\n      <div className=\"map-container\">\r\n      <GoogleMap\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n          mapContainerClassName=\"map-container\"\r\n        >\r\n          <PolylineF\r\n            path={pathArray}\r\n            options={{\r\n              strokeColor: '#5900FF',\r\n              strokeOpacity: 1.0,\r\n              strokeWeight: 5,\r\n            }}\r\n          />\r\n\r\n          {markers.map((marker, index) => (\r\n            <MarkerF\r\n              key={marker}\r\n              position={{ lat: marker.markerLat, lng: marker.markerLng }}\r\n              icon={marker.icon}\r\n              onClick={() => handleMarkerClick(marker)}\r\n            />\r\n          ))}\r\n        </GoogleMap>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SharedPage;\r\n"],"names":["pathId","useParams","_useState","useState","_useState2","_slicedToArray","path","setPath","_useState3","_useState4","markers","setMarkers","_useState5","_useState6","mapZoom","isLoaded","useLoadScript","googleMapsApiKey","process","apiUrl","useEffect","axios","get","concat","then","response","data","console","log","catch","error","_jsx","children","mapCenter","lat","lng","pathArray","_jsxs","className","id","startAddress","endAddress","startTime","endTime","GoogleMap","center","zoom","mapContainerClassName","PolylineF","options","strokeColor","strokeOpacity","strokeWeight","map","marker","index","MarkerF","position","markerLat","markerLng","icon","onClick"],"sourceRoot":""}