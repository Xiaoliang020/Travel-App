{"version":3,"file":"static/js/341.71c520e6.chunk.js","mappings":"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","sources":["views/mapStyles.js","views/Map.js"],"sourcesContent":["export const darkMode = {\n    fullscreenControl: false,\n    streetViewControl: false,\n    styles: [\n      { elementType: \"geometry\", stylers: [{ color: \"#242f3e\" }] },\n      { elementType: \"labels.text.stroke\", stylers: [{ color: \"#242f3e\" }] },\n      { elementType: \"labels.text.fill\", stylers: [{ color: \"#746855\" }] },\n      { featureType: \"administrative.locality\", elementType: \"labels.text.fill\", stylers: [{ color: \"#d59563\" }] },\n      { featureType: \"poi\", elementType: \"labels.text.fill\", stylers: [{ color: \"#d59563\" }] },\n      { featureType: \"poi.park\", elementType: \"geometry\", stylers: [{ color: \"#263c3f\" }] },\n      { featureType: \"poi.park\", elementType: \"labels.text.fill\", stylers: [{ color: \"#6b9a76\" }] },\n      { featureType: \"road\", elementType: \"geometry\", stylers: [{ color: \"#38414e\" }] },\n      { featureType: \"road\", elementType: \"geometry.stroke\", stylers: [{ color: \"#212a37\" }] },\n      { featureType: \"road\", elementType: \"labels.text.fill\", stylers: [{ color: \"#9ca5b3\" }] },\n      { featureType: \"road.highway\", elementType: \"geometry\", stylers: [{ color: \"#746855\" }] },\n      { featureType: \"road.highway\", elementType: \"geometry.stroke\", stylers: [{ color: \"#1f2835\" }] },\n      { featureType: \"road.highway\", elementType: \"labels.text.fill\", stylers: [{ color: \"#f3d19c\" }] },\n      { featureType: \"transit\", elementType: \"geometry\", stylers: [{ color: \"#2f3948\" }] },\n      { featureType: \"transit.station\", elementType: \"labels.text.fill\", stylers: [{ color: \"#d59563\" }] },\n      { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#17263c\" }] },\n      { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#515c6d\" }] },\n      { featureType: \"water\", elementType: \"labels.text.stroke\", stylers: [{ color: \"#17263c\" }] },\n    ],\n};","import { useState, useEffect, useRef } from 'react';\r\nimport { GoogleMap, useLoadScript, MarkerF, PolylineF } from '@react-google-maps/api';\r\nimport '../App.css';\r\nimport { FloatButton, Button, Tooltip, Modal, Upload, Input, message, Image } from 'antd';\r\nimport { useContext } from 'react';\r\nimport SavedPathsContext from '../SavedPathsContext';\r\nimport { ThemeContext } from '../App';\r\nimport { PlayCircleOutlined, StopOutlined, CompassOutlined, EyeOutlined, EyeInvisibleOutlined, PlusOutlined, ClearOutlined, DownloadOutlined, ShareAltOutlined } from '@ant-design/icons';\r\nimport html2canvas from 'html2canvas';\r\nimport Geocode from \"react-geocode\";\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport ImgCrop from 'antd-img-crop'\r\nimport TextArea from 'antd/es/input/TextArea';\r\nimport { darkMode } from './mapStyles';\r\n\r\nexport default function Map() {\r\n  const [positions, setPositions] = useState([]);\r\n  const [trackingEnabled, setTrackingEnabled] = useState(false); // State to track whether geolocation tracking is enabled\r\n  const [pathId, setPathId] = useState(0);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [currentPosition, setCurrentPositions] = useState({ lat: null, lng: null });\r\n  const [isPathsVisible, setIsPathsVisible] = useState(true);\r\n  const [mapCenter, setMapCenter] = useState(null);\r\n  const [mapZoom, setMapZoom] = useState(14);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [endTime, setEndTime] = useState(null);\r\n  const [markerName, setMarkerName] = useState(1);\r\n\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n  const pathName = useRef(\"\");\r\n  const inputText = useRef(\"\");\r\n  const markerIcon = useRef(\"\");\r\n  const markerPicture = useRef(\"\");\r\n  // const [pictureGroup, setPictureGroup] = useState([]);\r\n  // State to store the user's avatarUrl\r\n  const markerIconDataUrl = useRef(\"\");\r\n  const markerPictureDataUrl = useRef(\"\");\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [imageUrl, setImageUrl] = useState();\r\n\r\n  const { addPath, displayedPath, setDisplayedPath } = useContext(SavedPathsContext);\r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  const getBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = (error) => reject(error);\r\n    });\r\n  };\r\n\r\n  const [previewOpen, setPreviewOpen] = useState(false);\r\n  const [previewImage, setPreviewImage] = useState(\"\");\r\n\r\n\r\n  const handleCancel = () => setPreviewOpen(false);\r\n\r\n  const customRequest = async ({ file, onSuccess, onError }) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      // Change the URL to your backend endpoint that handles the icon upload\r\n      const response = await axios.post(`${apiUrl}/api/upload-icon`, formData);\r\n      if (response.data.code === '0') {\r\n        // Save the file URL or file ID returned by the backend in your state or user profile\r\n        console.log('Icon uploaded successfully:', response.data);\r\n        console.log(response.data.data)\r\n        markerIcon.current = response.data.data; // icon's objectID\r\n        console.log(markerIcon.current)\r\n        onSuccess();\r\n      } else {\r\n        onError(new Error('Failed to upload icon'));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading icon:', error);\r\n      onError(error);\r\n    }\r\n  };\r\n\r\n  // 监听每一个marker的图片数组\r\n  // useEffect(() => {\r\n  //   console.log(pictureGroup);\r\n  // }, [pictureGroup]);\r\n\r\n  const customPictureRequest = async ({ file, onSuccess, onError }) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      // Change the URL to your backend endpoint that handles the picture upload\r\n      const response = await axios.post(`${apiUrl}/api/upload-picture`, formData);\r\n      if (response.data.code === '0') {\r\n        // Save the file URL or file ID returned by the backend in your state or user profile\r\n        console.log('Picture uploaded successfully:', response.data);\r\n        console.log(response.data.data)\r\n        markerPicture.current = response.data.data; // picture's objectID\r\n        console.log(markerPicture.current)\r\n        // setPictureGroup((prev) => [...prev, markerPicture.current]);\r\n        onSuccess();\r\n      } else {\r\n        onError(new Error('Failed to upload picture'));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading picture:', error);\r\n      onError(error);\r\n    }\r\n  };\r\n\r\n  const handlePreview = async (file) => {\r\n    if (!file.url && !file.preview) {\r\n      file.preview = await getBase64(file.originFileObj);\r\n    }\r\n\r\n    setPreviewImage(file.url || file.preview);\r\n    setPreviewOpen(true);\r\n  };\r\n\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n  });\r\n\r\n  const [isTakingScreenshot, setIsTakingScreenshot] = useState(false);\r\n\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n      <div style={{ marginTop: 8 }}>Upload</div>\r\n    </div>\r\n  );\r\n\r\n  // const handleChange = ({ file, fileList: newFileList }) => {\r\n  //   if (file.status === 'uploading') {\r\n  //     setLoading(true);\r\n  //     return;\r\n  //   }\r\n  //   if (file.status === 'done') {\r\n  //     // Get this url from response in real world.\r\n  //     setImageUrl(URL.createObjectURL(file.originFileObj));\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n  const handleChange = (info) => {\r\n    if (info.file.status === 'done') {\r\n      message.success(`${info.file.name} uploaded successfully`);\r\n    } else if (info.file.status === 'error') {\r\n      message.error(`${info.file.name} upload failed.`);\r\n    }\r\n  };\r\n\r\n  function getLocation() {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          resolve({ latitude, longitude });\r\n        },\r\n        (error) => {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n\r\n  async function getAvgLocation(pathId) {\r\n\r\n    await new Promise((resolve) => {\r\n      setTimeout(function () {\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n\r\n    const { latitude: firstLat, longitude: firstLng } = await getLocation();\r\n    console.log({ firstLat, firstLng });\r\n\r\n    await new Promise((resolve) => {\r\n      setTimeout(function () {\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n\r\n    const { latitude: secondLat, longitude: secondLng } = await getLocation();\r\n    console.log({ secondLat, secondLng });\r\n\r\n    await new Promise((resolve) => {\r\n      setTimeout(function () {\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n\r\n    const { latitude: thirdLat, longitude: thirdLng } = await getLocation();\r\n    console.log({ thirdLat, thirdLng });\r\n\r\n    const position = {\r\n      latitude: (firstLat + secondLat + thirdLat) / 3.0,\r\n      longitude: (firstLng + secondLng + thirdLng) / 3.0\r\n    }\r\n\r\n    setPositions((prev) => [...prev, { lat: position.latitude, lng: position.longitude, type: \"default\", pathId }]);\r\n    setCurrentPositions({ lat: position.latitude, lng: position.longitude });\r\n\r\n    console.log(position);\r\n    setEndTime(new Date()); // Save the end time\r\n  }\r\n\r\n\r\n  // Get the user's current location\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          // Set the default map center to the user's current location\r\n          setMapCenter({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          });\r\n        },\r\n        (error) => {\r\n          console.error(\"Error retrieving geolocation:\", error);\r\n          // If can't get the user's current location, the set to a default location\r\n          setMapCenter({ lat: 40.7128, lng: -74.0060 }); // Anywhere can be changed later\r\n        }\r\n      );\r\n    } else {\r\n      // If the web browser doesn't support geolocation, also set a default center\r\n      setMapCenter({ lat: 40.7128, lng: -74.0060 });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (displayedPath && displayedPath.length > 0) {\r\n      // If there is a path to display, set the center point of the map to the first point of the displayed path\r\n      setMapCenter(displayedPath[0]);\r\n      setMapZoom(15);\r\n    } else if (positions.length > 0) {\r\n      // If there is no path to display, but is under tracking, set the center point of the map as the last tracked point\r\n      setMapCenter(positions[positions.length - 1]);\r\n    }\r\n    // If the geolocation cannot be obtained or there is no path being tracked, keep the center point unchanged\r\n  }, [displayedPath, positions]);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n\r\n    if (trackingEnabled) {\r\n      setStartTime(new Date()); // Save the start time\r\n      // Immediately get the current location\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setPositions((prev) => [...prev, { lat: latitude, lng: longitude, type: \"default\", pathId }]);\r\n          setCurrentPositions({ lat: latitude, lng: longitude });\r\n          console.log(\"Got first location after click the button\");\r\n        },\r\n        (error) => {\r\n          console.error('Error retrieving geolocation:', error);\r\n        }\r\n      );\r\n\r\n      // Start tracking location every 10 seconds\r\n      interval = setInterval(async () => {\r\n        console.log(\"Start Marking\");\r\n        await getAvgLocation(pathId);\r\n        console.log(\"Get a location\");\r\n        console.log(pathId);\r\n\r\n      }, 8000);\r\n    }\r\n\r\n    // Cleanup function to clear interval when component unmounts\r\n    return () => clearInterval(interval);\r\n  }, [trackingEnabled, pathId]);\r\n\r\n  const handleStartTracking = () => {\r\n    setPositions([]); // clear positions before a new tracking\r\n    setMarkers([]);\r\n    setTrackingEnabled(true);\r\n    setPathId(prevPathId => prevPathId + 1); // 使用回调函数更新 pathId\r\n    console.log(\"Start tracking\");\r\n  };\r\n\r\n  //TODO\r\n  const handleAddPoint = () => {\r\n    const { lat, lng } = currentPosition;\r\n\r\n    Modal.confirm({\r\n      title: 'Set a New Marker',\r\n      content: (\r\n        <div>\r\n          Marker icon:\r\n          <ImgCrop\r\n            rotationSlider={true}\r\n            zoomSlider={true}\r\n            quality={1}\r\n            cropShape='round'\r\n          >\r\n\r\n            <Upload\r\n              customRequest={customRequest}\r\n              listType=\"picture-circle\"\r\n              onPreview={handlePreview}\r\n              onChange={handleChange}\r\n            >\r\n              {uploadButton}\r\n\r\n            </Upload>\r\n\r\n          </ImgCrop>\r\n\r\n          Type something at this moment:\r\n\r\n          <TextArea\r\n            showCount\r\n            maxLength={200}\r\n            style={{ heght: 250, marginBottom: 24 }}\r\n            placeholder=\"It is memorable that ...\"\r\n            onChange={(e) => inputText.current = e.target.value}\r\n          />\r\n\r\n          Pictures:\r\n          <ImgCrop>\r\n            <Upload\r\n              listType=\"picture-card\"\r\n              customRequest={customPictureRequest}\r\n              onPreiew={handlePreview}\r\n              onChange={handleChange}\r\n            >\r\n              {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n            </Upload>\r\n          </ImgCrop>\r\n\r\n        </div>\r\n      ),\r\n      onOk: (close) => {\r\n\r\n        axios.get(`${apiUrl}/api/icon/${markerIcon.current}`)\r\n          .then((response) => {\r\n            if (response.data.code === '0') {\r\n              console.log(response.data.data);\r\n              const imageBase64 = response.data.data;\r\n              // Set the userAvatarUrl state with the fetched avatar data\r\n              markerIconDataUrl.current = `data:image/png;base64,${imageBase64}`;\r\n              console.log(markerIconDataUrl.current)\r\n\r\n              const customMarkerIcon = {\r\n                url: markerIconDataUrl.current, // your base64 data url\r\n                scaledSize: new google.maps.Size(64, 64) // the size you want to scale to\r\n              };\r\n\r\n              const newMarker = {\r\n                markerLat: lat,\r\n                markerLng: lng,\r\n                type: \"custom\",\r\n                markerID: Date.now(), // Assign a unique ID to the marker\r\n                name: markerName,\r\n                text: inputText.current,\r\n                url: customMarkerIcon, // Only for display, will not stored in database\r\n                icon: markerIcon.current,\r\n                pathID: \"\"\r\n              };\r\n\r\n              console.log(newMarker);\r\n\r\n              setMarkers((prev) => [...prev, newMarker]);\r\n              setMarkerName(markerName + 1);\r\n              console.log(\"Add an information point\");\r\n\r\n            } else {\r\n              console.log(\"Icon not found\");\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching icon data:', error);\r\n          });\r\n\r\n\r\n        close();\r\n      },\r\n    });\r\n  };\r\n\r\n  Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\r\n\r\n  const handleStopTracking = () => {\r\n    setTrackingEnabled(false);\r\n    console.log(\"Stop tracking\");\r\n\r\n    const duration = (endTime - startTime) / 1000; // Calculate the duration in seconds\r\n    if (duration < 10) {\r\n      Modal.warning({\r\n        centered: true,\r\n        title: 'Warning',\r\n        content: 'The path is less than 10 seconds long and will not be saved.',\r\n      });\r\n      return;\r\n    }\r\n\r\n    Modal.confirm({\r\n      centered: true,\r\n      title: 'Do you want to save this path?',\r\n      content: (\r\n        <div>\r\n          <p>Enter a name for the path:</p>\r\n          <Input\r\n            onChange={(e) => {\r\n              pathName.current = e.target.value;\r\n            }}\r\n            placeholder=\"Path name\"\r\n          />\r\n        </div>\r\n      ),\r\n      onOk: () => {\r\n        console.log(pathName);\r\n        const startCoordinates = positions[0];\r\n        const endCoordinates = positions[positions.length - 1];\r\n        // Get the user info stored in sessionStorage\r\n        const user = JSON.parse(sessionStorage.getItem(\"user\"));\r\n\r\n        // 使用逆地理编码服务获取开始点的地址\r\n        Geocode.fromLatLng(startCoordinates.lat, startCoordinates.lng)\r\n          .then((response) => {\r\n            const startAddress = response.results[0].formatted_address;\r\n\r\n            // 使用逆地理编码服务获取结束点的地址\r\n            Geocode.fromLatLng(endCoordinates.lat, endCoordinates.lng)\r\n              .then((response) => {\r\n                const endAddress = response.results[0].formatted_address;\r\n\r\n                const pathData = {\r\n                  path: positions,\r\n                  startTime: startTime,\r\n                  endTime: endTime,\r\n                  duration: duration,\r\n                  startAddress: startAddress,\r\n                  endAddress: endAddress,\r\n                  userid: user.id,\r\n                  name: pathName.current,\r\n                };\r\n\r\n                console.log(\"PathData\", pathData);\r\n\r\n                //send pathData to back end\r\n                axios.post(`${apiUrl}/api/path-data`, pathData)\r\n                  .then(response => {\r\n                    // Check the response code\r\n                    if (response.data.code === '0') {\r\n                      console.log('Path data successfully sent to the backend:', response.data);\r\n                    }\r\n                    // Get pathId from back end\r\n                    console.log(response.data.data);\r\n                    const updatedMarkers = markers.map(item => ({ ...item, pathID: response.data.data }))\r\n\r\n                    // send markerData to back end\r\n                    updatedMarkers.forEach(marker => {\r\n                      console.log(marker)\r\n                      axios.post(`${apiUrl}/api/marker-data`, marker)\r\n                        .then(response => {\r\n                          if (response.data.code === '0') {\r\n                            console.log('Marker data successfully sent to backend:', response.data);\r\n                          }\r\n                        })\r\n                        .catch(error => {\r\n                          console.log('Error sending marker data to the backend:', error);\r\n                        });\r\n                    })\r\n\r\n                  })\r\n                  .catch(error => {\r\n                    console.error('Error sending path data to the backend:', error);\r\n                  });\r\n                //save pathData at front end\r\n                addPath(pathData);\r\n              })\r\n              .catch((error) => {\r\n                console.error(\"Error geocoding end coordinates:\", error);\r\n              });\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error geocoding start coordinates:\", error);\r\n          });\r\n      },\r\n      // No action on cancel, as we just close the modal\r\n    });\r\n  };\r\n\r\n  // TODO\r\n  const handleMarkerClick = (marker) => {\r\n    console.log(\"marker text is:\" + marker.text)\r\n\r\n    axios.get(`${apiUrl}/api/picture/${markerPicture.current}`)\r\n      .then((response) => {\r\n        if (response.data.code === '0') {\r\n          console.log(response.data.data);\r\n          const imageBase64 = response.data.data;\r\n          // Set the userAvatarUrl state with the fetched picture data\r\n          markerPictureDataUrl.current = `data:image/png;base64,${imageBase64}`;\r\n          console.log(markerPictureDataUrl.current)\r\n\r\n          // Open the modal after successfully fetching the picture data\r\n          openModal(marker);\r\n        } else {\r\n          console.log(\"Picture not found\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching picture data:', error);\r\n      });\r\n  };\r\n\r\n  const openModal = (marker) => {\r\n    Modal.confirm({\r\n      title: 'The comment you left in this place',\r\n      content: (\r\n        <div>\r\n          Do you want to add something new?\r\n          <TextArea\r\n            showCount\r\n            maxLength={200}\r\n            style={{ height: 250, marginBottom: 24 }}\r\n            placeholder=\"Input something...\"\r\n            defaultValue={marker.text}\r\n            onChange={(e) => inputText.current = e.target.value}\r\n          />\r\n          Pictures:\r\n          <div>\r\n            <Image.PreviewGroup\r\n              preview={{\r\n                onChange: (current, prev) => console.log(`current index: ${current}, prev index: ${prev}`),\r\n              }}\r\n            >\r\n              <Image width={100} src={markerPictureDataUrl.current} />\r\n              <Image\r\n                width={100}\r\n                src=\"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg\"\r\n              />\r\n            </Image.PreviewGroup>\r\n          </div>\r\n          <ImgCrop>\r\n            <Upload\r\n              listType=\"picture-card\"\r\n              onPreview={handlePreview}\r\n              onChange={handleChange}\r\n            >\r\n              {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n            </Upload>\r\n          </ImgCrop>\r\n        </div>\r\n      ),\r\n      onOk: (close) => {\r\n        const newMarker = {\r\n          lat: marker.lat,\r\n          lng: marker.lng,\r\n          type: \"custom\",\r\n          id: marker.id, // Assign a unique ID to the marker\r\n          name: marker.name,\r\n          text: inputText.current,\r\n          icon: marker.icon\r\n        };\r\n\r\n        setMarkers(markers.map(m => m === marker ? newMarker : m))\r\n        close();\r\n      },\r\n    });\r\n  };\r\n\r\n\r\n\r\n  // Group positions by pathId\r\n  const positionByPathId = positions.reduce((acc, position) => {\r\n    (acc[position.pathId] = acc[position.pathId] || []).push(position);\r\n    return acc;\r\n  }, {});\r\n\r\n  const handleClearPaths = () => {\r\n    // setClearedPaths(positions);\r\n    setPositions([]);\r\n    setMarkers([]);\r\n    setMarkerName(1);\r\n    setPathId(0);\r\n    setDisplayedPath([]);\r\n  }\r\n\r\n  const togglePathsVisibility = () => {\r\n    setIsPathsVisible(!isPathsVisible);\r\n  };\r\n\r\n\r\n\r\n  const handleScreenshot = async () => {\r\n    setIsTakingScreenshot(true);\r\n\r\n    const mapContainer = document.querySelector('.map-container');\r\n\r\n    html2canvas(mapContainer, { useCORS: true, allowTaint: true }).then((canvas) => {\r\n      const link = document.createElement('a');\r\n      link.href = canvas.toDataURL('image/png');\r\n      link.download = 'screenshot.png';\r\n      link.click();\r\n\r\n      setIsTakingScreenshot(false);\r\n    });\r\n  };\r\n\r\n  const handleShareScreenshot = async () => {\r\n    setIsTakingScreenshot(true);\r\n\r\n    const mapContainer = document.querySelector('.map-container');\r\n\r\n    html2canvas(mapContainer, { useCORS: true, allowTaint: true }).then((canvas) => {\r\n      const blob = canvas.toBlob((blob) => {\r\n        if (blob) {\r\n          const file = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n\r\n          if (navigator.share) {\r\n            // Share the screenshot using the Web Share API\r\n            navigator.share({\r\n              files: [file],\r\n            });\r\n          } else {\r\n            console.error('Web Share API not supported.');\r\n          }\r\n        } else {\r\n          console.error('Failed to generate screenshot blob.');\r\n        }\r\n\r\n        setIsTakingScreenshot(false);\r\n      });\r\n    });\r\n  };\r\n\r\n  if (!isLoaded) return <div>Loading..</div>\r\n\r\n  return (\r\n    /*global google*/\r\n    <div className=\"map-view\">\r\n      <div className=\"map-container\">\r\n        <GoogleMap\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n          mapContainerClassName=\"map-container\"\r\n          options={{\r\n            fullscreenControl: false,\r\n            streetViewControl: false,\r\n            ...theme === 'default' ? {} : darkMode,\r\n          }}\r\n        >\r\n          {isPathsVisible && Object.values(positionByPathId).map((pathPositions, index) => (\r\n            <PolylineF\r\n              key={index}\r\n              path={pathPositions}\r\n              options={{\r\n                strokeColor: '#0000FF',\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 5,\r\n              }}\r\n            />\r\n          ))}\r\n\r\n          {displayedPath && isPathsVisible && ( // Display the saved path\r\n            <PolylineF\r\n              path={displayedPath}\r\n              options={{\r\n                strokeColor: '#FF0000',\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 5,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {markers.map((marker, index) => (\r\n            <MarkerF\r\n              key={marker}\r\n              position={{ lat: marker.markerLat, lng: marker.markerLng }}\r\n              visible={marker.type === 'custom'}\r\n              icon={marker.url}\r\n\r\n              onClick={() => handleMarkerClick(marker)}\r\n            />\r\n          ))}\r\n        </GoogleMap>\r\n\r\n        {/* Main start/stop button */}\r\n        <div className='map-view-start-stop-button'>\r\n          {trackingEnabled ? (\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size=\"large\"\r\n              onClick={handleStopTracking}\r\n              icon={<StopOutlined />}\r\n              style={{ backgroundColor: 'OrangeRed' }}\r\n            >\r\n              STOP\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size=\"large\"\r\n              onClick={handleStartTracking}\r\n              icon={<PlayCircleOutlined />}\r\n              style={{ backgroundColor: 'LimeGreen' }}\r\n            >\r\n              START\r\n            </Button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Text location information and back to top button*/}\r\n        <FloatButton.Group shape=\"circle\" style={{ left: 24 }}>\r\n          <Tooltip\r\n            title={\r\n              <div>\r\n                <h1>Your current location:</h1>\r\n                <p>Latitude: {currentPosition.lat} </p>\r\n                <p>Longitude: {currentPosition.lng}</p>\r\n              </div>\r\n            }\r\n            placement='right'\r\n            color='#87d068'\r\n          >\r\n            <FloatButton\r\n              icon={<CompassOutlined />}\r\n            />\r\n          </Tooltip>\r\n\r\n          <FloatButton.BackTop visibilityHeight={0} />\r\n        </FloatButton.Group>\r\n\r\n\r\n        {/* Functional buttons group */}\r\n        <FloatButton.Group shape=\"circle\" style={{ right: 50, top: '60%', transform: 'translateY(-50%)' }}>\r\n          {isPathsVisible ? (\r\n            <FloatButton\r\n              icon={<EyeInvisibleOutlined />}\r\n              tooltip='Hide Paths'\r\n              onClick={togglePathsVisibility}\r\n            />\r\n          ) : (\r\n            <FloatButton\r\n              icon={<EyeOutlined />}\r\n              tooltip='Show Paths'\r\n              onClick={togglePathsVisibility}\r\n            />\r\n          )}\r\n\r\n          <FloatButton\r\n            icon={<PlusOutlined />}\r\n            tooltip='Add a Point'\r\n            onClick={handleAddPoint}\r\n            disabled={!trackingEnabled}\r\n          />\r\n\r\n          <FloatButton\r\n            icon={<ClearOutlined />}\r\n            tooltip='Clear'\r\n            onClick={handleClearPaths}\r\n            disabled={trackingEnabled}\r\n          />\r\n\r\n          <FloatButton\r\n            icon={<DownloadOutlined />}\r\n            tooltip=\"Take Screenshot\"\r\n            onClick={handleScreenshot}\r\n            disabled={isTakingScreenshot}\r\n          />\r\n\r\n          <FloatButton\r\n            icon={<ShareAltOutlined />}\r\n            tooltip=\"Share\"\r\n            onClick={handleShareScreenshot}\r\n            disabled={isTakingScreenshot}\r\n          />\r\n        </FloatButton.Group>\r\n\r\n      </div>\r\n\r\n    </div >\r\n  );\r\n}"],"names":["darkMode","fullscreenControl","streetViewControl","styles","elementType","stylers","color","featureType","Map","_useState","useState","_useState2","_slicedToArray","positions","setPositions","_useState3","_useState4","trackingEnabled","setTrackingEnabled","_useState5","_useState6","pathId","setPathId","_useState7","_useState8","markers","setMarkers","_useState9","lat","lng","_useState10","currentPosition","setCurrentPositions","_useState11","_useState12","isPathsVisible","setIsPathsVisible","_useState13","_useState14","mapCenter","setMapCenter","_useState15","_useState16","mapZoom","setMapZoom","_useState17","_useState18","startTime","setStartTime","_useState19","_useState20","endTime","setEndTime","_useState21","_useState22","markerName","setMarkerName","apiUrl","process","pathName","useRef","inputText","markerIcon","markerPicture","markerIconDataUrl","markerPictureDataUrl","_useState23","_useState24","loading","_useState25","_useState26","imageUrl","_useContext","useContext","SavedPathsContext","addPath","displayedPath","setDisplayedPath","theme","ThemeContext","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","_useState27","_useState28","setPreviewOpen","_useState29","_useState30","setPreviewImage","customRequest","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","onSuccess","onError","formData","response","wrap","_context","prev","next","FormData","append","axios","post","concat","sent","data","code","console","log","current","Error","t0","stop","_x","apply","arguments","customPictureRequest","_ref4","_callee2","_ref3","_context2","_x2","handlePreview","_ref5","_callee3","_context3","url","preview","originFileObj","_x3","isLoaded","useLoadScript","googleMapsApiKey","_useState31","_useState32","isTakingScreenshot","setIsTakingScreenshot","uploadButton","_jsxs","children","_jsx","LoadingOutlined","PlusOutlined","style","marginTop","handleChange","info","status","message","success","name","getLocation","navigator","geolocation","getCurrentPosition","position","_position$coords","coords","latitude","longitude","getAvgLocation","_x4","_getAvgLocation","_callee7","_yield$getLocation","firstLat","firstLng","_yield$getLocation2","secondLat","secondLng","_yield$getLocation3","thirdLat","thirdLng","_context7","setTimeout","_toConsumableArray","type","Date","useEffect","length","interval","_position$coords2","setInterval","_callee4","_context4","clearInterval","Geocode","setApiKey","openModal","marker","Modal","confirm","title","content","TextArea","showCount","maxLength","height","marginBottom","placeholder","defaultValue","text","onChange","e","target","value","Image","PreviewGroup","width","src","ImgCrop","Upload","listType","onPreview","alt","onOk","close","newMarker","id","icon","map","m","positionByPathId","reduce","acc","push","togglePathsVisibility","handleScreenshot","_ref7","_callee5","mapContainer","_context5","document","querySelector","html2canvas","useCORS","allowTaint","then","canvas","link","createElement","href","toDataURL","download","click","handleShareScreenshot","_ref8","_callee6","_context6","toBlob","blob","File","share","files","className","GoogleMap","center","zoom","mapContainerClassName","options","_objectSpread","Object","values","pathPositions","index","PolylineF","path","strokeColor","strokeOpacity","strokeWeight","MarkerF","markerLat","markerLng","visible","onClick","get","imageBase64","catch","handleMarkerClick","Button","shape","size","duration","warning","centered","Input","startCoordinates","endCoordinates","user","JSON","parse","sessionStorage","getItem","fromLatLng","startAddress","results","formatted_address","endAddress","pathData","userid","item","pathID","forEach","StopOutlined","backgroundColor","prevPathId","PlayCircleOutlined","FloatButton","Group","left","Tooltip","placement","CompassOutlined","BackTop","visibilityHeight","right","top","transform","EyeInvisibleOutlined","tooltip","EyeOutlined","rotationSlider","zoomSlider","quality","cropShape","heght","onPreiew","customMarkerIcon","scaledSize","google","maps","Size","markerID","now","disabled","ClearOutlined","DownloadOutlined","ShareAltOutlined"],"sourceRoot":""}