{"version":3,"file":"static/js/445.3a70855c.chunk.js","mappings":"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","sources":["views/Map.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { GoogleMap, useLoadScript, MarkerF, PolylineF } from '@react-google-maps/api';\r\nimport '../App.css';\r\nimport { useContext } from 'react';\r\nimport SavedPathsContext from '../SavedPathsContext';\r\nimport { ThemeContext } from '../App';\r\n\r\nexport default function Map() {\r\n  const [positions, setPositions] = useState([]);\r\n  const [trackingEnabled, setTrackingEnabled] = useState(false); // State to track whether geolocation tracking is enabled\r\n  const [pathId, setPathId] = useState(0);\r\n  // const [clearedPaths, setClearedPaths] = useState([]); // State to store cleared paths, probably needed for future features\r\n  const [currentPosition, setCurrentPositions] = useState({ lat: null, lng: null });\r\n  const [isPathsVisible, setIsPathsVisible] = useState(true);\r\n  const [mapCenter, setMapCenter] = useState(null);\r\n  const [mapZoom, setMapZoom] = useState(14);\r\n\r\n  const { addPath, displayedPath, setDisplayedPath } = useContext(SavedPathsContext);\r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n  });\r\n\r\n  const mapId = theme === 'default' ? '17e23ad9dc98cd76' : '965d3fbc319fcf57';\r\n\r\n  // Get the user's current location\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          // Set the default map center to the user's current location\r\n          setMapCenter({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          });\r\n        },\r\n        (error) => {\r\n          console.error(\"Error retrieving geolocation:\", error);\r\n          // If can't get the user's current location, the set to a default location\r\n          setMapCenter({ lat: 40.7128, lng: -74.0060 }); // Anywhere can be changed later\r\n        }\r\n      );\r\n    } else {\r\n      // If the web browser doesn't support geolocation, also set a default center\r\n      setMapCenter({ lat: 40.7128, lng: -74.0060 });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (displayedPath && displayedPath.length > 0) {\r\n      // If there is a path to display, set the center point of the map to the first point of the displayed path\r\n      setMapCenter(displayedPath[0]);\r\n      setMapZoom(15);\r\n    } else if (positions.length > 0) {\r\n      // If there is no path to display, but is under tracking, set the center point of the map as the last tracked point\r\n      setMapCenter(positions[positions.length - 1]);\r\n    }\r\n    // If the geolocation cannot be obtained or there is no path being tracked, keep the center point unchanged\r\n  }, [displayedPath, positions]);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n\r\n    if (trackingEnabled) {\r\n      // Immediately get the current location\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setPositions((prev) => [...prev, { lat: latitude, lng: longitude, type: \"default\", pathId }]);\r\n          setCurrentPositions({ lat: latitude, lng: longitude });\r\n          console.log(\"Got first location after click the button\");\r\n        },\r\n        (error) => {\r\n          console.error('Error retrieving geolocation:', error);\r\n        }\r\n      );\r\n\r\n      // Start tracking location every 10 seconds\r\n      interval = setInterval(() => {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n            setPositions((prev) => [...prev, { lat: latitude, lng: longitude, type: \"default\", pathId }]);\r\n            setCurrentPositions({ lat: latitude, lng: longitude });\r\n            console.log(\"Get a location\");\r\n            console.log(pathId);\r\n          },\r\n          (error) => {\r\n            console.error('Error retrieving geolocation:', error);\r\n          }\r\n        );\r\n      }, 10000);\r\n    }\r\n\r\n    // Cleanup function to clear interval when component unmounts\r\n    return () => clearInterval(interval);\r\n  }, [trackingEnabled, pathId]);\r\n\r\n  const handleStartTracking = () => {\r\n    setPositions([]); // clear positions before a new tracking\r\n    setTrackingEnabled(true);\r\n    setPathId(pathId + 1);\r\n    console.log(\"Start tracking\");\r\n  };\r\n\r\n  const handleStopTracking = () => {\r\n    setTrackingEnabled(false);\r\n    console.log(\"Stop tracking\");\r\n\r\n    if (window.confirm(\"Do you want to save this path?\")) {\r\n      addPath(positions);\r\n    }\r\n  };\r\n\r\n  // Group positions by pathId\r\n  const positionByPathId = positions.reduce((acc, position) => {\r\n    (acc[position.pathId] = acc[position.pathId] || []).push(position);\r\n    return acc;\r\n  }, {});\r\n\r\n  const handleClearPaths = () => {\r\n    // setClearedPaths(positions);\r\n    setPositions([]);\r\n    setPathId(0);\r\n    setDisplayedPath([]);\r\n  }\r\n\r\n  const togglePathsVisibility = () => {\r\n    setIsPathsVisible(!isPathsVisible);\r\n  };\r\n\r\n  const handleAddPoint = () => {\r\n    const { lat, lng } = currentPosition;\r\n    const newMarker = {\r\n      lat,\r\n      lng,\r\n      type: \"custom\",\r\n      id: Date.now(), // Assign a unique ID to the marker\r\n    };\r\n\r\n    setPositions((prevPositions) => [...prevPositions, newMarker]);\r\n    console.log(\"Add an information point\");\r\n  };\r\n\r\n\r\n  if (!isLoaded) return <div>Loading..</div>\r\n\r\n  return (\r\n    <div className=\"map-view\">\r\n      <h1>Location Information</h1>\r\n\r\n      <div>\r\n        <p>Latitude: {currentPosition.lat}</p>\r\n        <p>Longitude: {currentPosition.lng}</p>\r\n      </div>\r\n\r\n      <div>\r\n        {trackingEnabled ? (\r\n          <button\r\n            className=\"tracking-button tracking-button-stop\"\r\n            onClick={handleStopTracking}\r\n          >\r\n            Stop Tracking\r\n          </button>\r\n        ) : (\r\n          <button\r\n            className=\"tracking-button tracking-button-start\"\r\n            onClick={handleStartTracking}\r\n          >\r\n            Start Tracking\r\n          </button>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <button\r\n          className=\"visibility-button\"\r\n          onClick={togglePathsVisibility}\r\n        >\r\n          {isPathsVisible ? 'Hide Paths' : 'Show Paths'}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <button\r\n          className=\"add-point-button\"\r\n          onClick={handleAddPoint}\r\n          disabled={!trackingEnabled}\r\n        >\r\n          Add a Point\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <button\r\n          className=\"clear-button\"\r\n          onClick={handleClearPaths}\r\n          disabled={trackingEnabled}\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <GoogleMap\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n          mapContainerClassName=\"map-container\"\r\n          options={{\r\n            mapId: mapId,\r\n          }}\r\n        >\r\n          {isPathsVisible && Object.values(positionByPathId).map((pathPositions, index) => (\r\n            <PolylineF\r\n              key={index}\r\n              path={pathPositions}\r\n              options={{\r\n                strokeColor: '#0000FF',\r\n                // strokeColor: parseInt(pathId) % 2 === 0 ? '#0000FF' : '#00FF00',\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 5,\r\n              }}\r\n            />\r\n          ))}\r\n\r\n          {displayedPath && isPathsVisible && ( // Display the saved path\r\n            <PolylineF\r\n              path={displayedPath}\r\n              options={{\r\n                strokeColor: '#FF0000',\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 5,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {positions.map((position, index) => (\r\n            <MarkerF\r\n              key={index}\r\n              position={position}\r\n              icon={position.type === 'custom' ? {\r\n                url: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/info-i_maps.png'\r\n              } : null}\r\n            />\r\n          ))}\r\n        </GoogleMap>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":["Map","_useState","useState","_useState2","_slicedToArray","positions","setPositions","_useState3","_useState4","trackingEnabled","setTrackingEnabled","_useState5","_useState6","pathId","setPathId","_useState7","lat","lng","_useState8","currentPosition","setCurrentPositions","_useState9","_useState10","isPathsVisible","setIsPathsVisible","_useState11","_useState12","mapCenter","setMapCenter","_useState13","_useState14","mapZoom","setMapZoom","_useContext","useContext","SavedPathsContext","addPath","displayedPath","setDisplayedPath","theme","ThemeContext","isLoaded","useLoadScript","googleMapsApiKey","process","mapId","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","length","interval","_position$coords","prev","concat","_toConsumableArray","type","log","setInterval","_position$coords2","clearInterval","positionByPathId","reduce","acc","push","_jsxs","className","children","_jsx","onClick","window","confirm","newMarker","id","Date","now","prevPositions","disabled","GoogleMap","center","zoom","mapContainerClassName","options","Object","values","map","pathPositions","index","PolylineF","path","strokeColor","strokeOpacity","strokeWeight","MarkerF","icon","url"],"sourceRoot":""}