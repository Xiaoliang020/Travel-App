{"version":3,"file":"static/js/362.bace4521.chunk.js","mappings":"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","sources":["views/Share.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { GoogleMap, useLoadScript, MarkerF, PolylineF } from '@react-google-maps/api';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport '../App.css';\r\n\r\nconst SharedPage = () => {\r\n  const { pathId } = useParams();\r\n  const [path, setPath] = useState(null);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [mapZoom, setMapZoom] = useState(15);\r\n  const [isMarkersReady, setIsMarkersReady] = useState(false);\r\n\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n  });\r\n\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n  useEffect(() => {\r\n    axios.get(`${apiUrl}/api/share/${pathId}`)\r\n      .then(response => {\r\n        setPath(response.data.data);\r\n        console.log(\"Successfully retrive shared path:\", response.data.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error retrieving shared path:', error);\r\n      });\r\n    // get markers binded with the path\r\n    axios.get(`${apiUrl}/api/share/marker/${pathId}`)\r\n      .then(response => {\r\n        console.log(response.data.data);\r\n        const markersData = response.data.data;\r\n        Promise.all(markersData.map(marker => {\r\n          return axios.get(`${apiUrl}/api/icon/${marker.icon}`)\r\n            .then(response => {\r\n              // ... (existing code to handle marker icon response)\r\n              if (response.data.code === '0') {\r\n                console.log('Marker data get successfully', response.data);\r\n                const imageBase64 = response.data.data;\r\n                const imageUrl = `data:image/png;base64,${imageBase64}`;\r\n                const customMarkerIcon = {\r\n                  url: imageUrl,\r\n                  scaledSize: new window.google.maps.Size(64, 64)\r\n                };\r\n                marker.url = customMarkerIcon;\r\n              }\r\n            })\r\n            .catch(error => {\r\n              console.log('Error getting marker icon from the backend:', error);\r\n            });\r\n        })).then(() => {\r\n          setMarkers(markersData);\r\n          setIsMarkersReady(true);; // Markers and icons are now ready\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.error('Error retrieving shared markers:', error);\r\n      });\r\n  }, [pathId]);\r\n\r\n  // TODO\r\n  const handleMarkerClick = (marker) => {\r\n    \r\n  };\r\n\r\n  if (!path || !isMarkersReady || !isLoaded) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const mapCenter = {\r\n    lat: path.path[0].lat,\r\n    lng: path.path[0].lng,\r\n  };\r\n\r\n  const pathArray = path.path;\r\n\r\n  if (!isLoaded) return <div>Loading..</div>\r\n\r\n  return (\r\n    <div className=\"map-view\">\r\n      <h1>Path Name: {path.name}</h1>\r\n      <p>Start Address: {path.startAddress}</p>\r\n      <p>End Address: {path.endAddress}</p>\r\n      <p>Start Time: {path.startTime}</p>\r\n      <p>End Time: {path.endTime}</p>\r\n      <div className=\"map-container\">\r\n        {isMarkersReady && isLoaded && ( // Check if markers are ready and Google Map is loaded\r\n          <GoogleMap\r\n            center={mapCenter}\r\n            zoom={mapZoom}\r\n            mapContainerClassName=\"map-container\"\r\n          >\r\n            <PolylineF\r\n              path={pathArray}\r\n              options={{\r\n                strokeColor: '#5900FF',\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 5,\r\n              }}\r\n            />\r\n\r\n            {markers.map((marker, index) => (\r\n              <MarkerF\r\n                key={marker.id} // Assuming there's a unique id for each marker\r\n                position={{ lat: marker.markerLat, lng: marker.markerLng }}\r\n                icon={marker.url}\r\n                onClick={() => handleMarkerClick(marker)}\r\n              />\r\n            ))}\r\n          </GoogleMap>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SharedPage;\r\n"],"names":["pathId","useParams","_useState","useState","_useState2","_slicedToArray","path","setPath","_useState3","_useState4","markers","setMarkers","_useState5","_useState6","mapZoom","_useState7","_useState8","isMarkersReady","setIsMarkersReady","isLoaded","useLoadScript","googleMapsApiKey","process","apiUrl","useEffect","axios","get","concat","then","response","data","console","log","catch","error","markersData","Promise","all","map","marker","icon","code","imageBase64","customMarkerIcon","url","scaledSize","window","google","maps","Size","_jsx","children","mapCenter","lat","lng","pathArray","_jsxs","className","name","startAddress","endAddress","startTime","endTime","GoogleMap","center","zoom","mapContainerClassName","PolylineF","options","strokeColor","strokeOpacity","strokeWeight","index","MarkerF","position","markerLat","markerLng","onClick","id"],"sourceRoot":""}