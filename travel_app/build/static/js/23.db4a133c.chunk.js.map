{"version":3,"file":"static/js/23.db4a133c.chunk.js","mappings":"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","sources":["views/Paths.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { Table, Modal, Button, Card, Row, Col, message } from 'antd';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SavedPathsContext from '../SavedPathsContext';\r\nimport axios from 'axios';\r\n\r\nexport default function Paths() {\r\n    const { savedPaths, setDisplayedPath, deletePath } = useContext(SavedPathsContext);\r\n\r\n    const [paths, setPaths] = useState([]);\r\n    const navigate = useNavigate();\r\n    // Get the user info stored in sessionStorage\r\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\r\n\r\n    useEffect(() => {\r\n        axios.get(`/api/paths/${user.id}`)\r\n            .then(response => {\r\n                console.log(response.data);\r\n                setPaths(response.data.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error retrieving paths:', error);\r\n            });\r\n    }, []);\r\n\r\n    const handleDisplayPath = (path) => {\r\n        setDisplayedPath(path);\r\n        navigate('/map');\r\n    };\r\n\r\n    const handleDeletePath = (pathId) => {\r\n        Modal.confirm({\r\n            centered: true,\r\n            title: 'Confirm Deletion',\r\n            content: 'Are you sure you want to delete this path?',\r\n            onOk: () => {\r\n                console.log(pathId);\r\n                const data = { pathId }; // Wrap pathId in an object\r\n                axios.post(`/api/paths-delete`, data)\r\n                    .then((response) => {\r\n                        // Check the response code\r\n                        if (response.data.code === '0') {\r\n                            // Delete successful\r\n                            console.log('Delete successful!', response.data);\r\n                            message.success('Delete success!');\r\n                            window.location.reload();\r\n                        } else if (response.data.code === '-1') {\r\n                            // Delete failed\r\n                            console.error('Delete failed:', response.data.msg);\r\n                        }\r\n                    })\r\n            },\r\n        });\r\n    };\r\n\r\n    const getCurrentWebsiteURL = () => {\r\n        const protocol = window.location.protocol;\r\n        const hostname = window.location.hostname;\r\n        const port = window.location.port;\r\n        const path = window.location.pathname;\r\n\r\n        // If the port is empty or equal to 80 (HTTP) or 443 (HTTPS), don't include it in the URL\r\n        const portSuffix = (port && port !== '80' && port !== '443') ? `:${port}` : '';\r\n\r\n        // Assemble the website URL\r\n        const websiteURL = `${protocol}//${hostname}${portSuffix}`;\r\n\r\n        return websiteURL;\r\n    };\r\n\r\n    const handleSharePath = (pathId) => {\r\n        // axios.get(`/api/share/${pathId}`)\r\n        // .then((response) => {\r\n        //     // Get the shareable link from the response and show it to the user\r\n        //     const currentURL = getCurrentWebsiteURL();\r\n        //     console.log(currentURL);\r\n        //     message.success('Shareable link: ' + currentURL + `/share/${pathId}`);\r\n        // })\r\n        // .catch((error) => {\r\n        //     console.error('Error generating shareable link:', error);\r\n        //     message.error('Error generating shareable link');\r\n        // });\r\n        // Get the shareable link from the response and show it to the user\r\n        const currentURL = getCurrentWebsiteURL();\r\n        console.log(currentURL);\r\n        message.success('Shareable link: ' + currentURL + `/share/${pathId}`);\r\n    }\r\n\r\n    // Define the columns for the table\r\n    const columns = [\r\n        {\r\n            title: 'Path Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Start place & time',\r\n            dataIndex: 'start',\r\n            key: 'start',\r\n            render: (text, record) => (\r\n                <div>\r\n                    <p>Time: {new Date(record.startTime).toLocaleString()}</p>\r\n                    <p>Place: {record.startAddress}</p>\r\n                </div>\r\n            ),\r\n            sorter: (a, b) => new Date(a.startTime) - new Date(b.startTime)\r\n        },\r\n        {\r\n            title: 'End place & time',\r\n            dataIndex: 'end',\r\n            key: 'end',\r\n            render: (text, record) => (\r\n                <div>\r\n                    <p>Time: {new Date(record.endTime).toLocaleString()}</p>\r\n                    <p>Place: {record.endAddress}</p>\r\n                </div>\r\n            ),\r\n            sorter: (a, b) => new Date(a.endTime) - new Date(b.endTime)\r\n        },\r\n        {\r\n            title: 'Duration',\r\n            dataIndex: 'duration',\r\n            key: 'duration',\r\n            render: (text, record) => (\r\n                <div>{formatDuration(record.duration)}</div>\r\n            ),\r\n            sorter: (a, b) => a.duration - b.duration\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <div>\r\n                    <Button onClick={() => handleDisplayPath(record.path)}>Display on map</Button>\r\n                    <Button onClick={() => handleDeletePath(record.id)}>Delete</Button>\r\n                    <Button onClick={() => handleSharePath(record.id)}>Share</Button>\r\n                </div>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const formatDuration = (duration) => {\r\n        const hours = Math.floor(duration / 3600);\r\n        const minutes = Math.floor((duration % 3600) / 60);\r\n        const seconds = Math.round(duration % 60);\r\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    // Define the data for the table\r\n    const data = paths.map((path, index) => ({\r\n        key: index + 1,\r\n        id: path.id,\r\n        path: path.path,\r\n        startTime: path.startTime,\r\n        endTime: path.endTime,\r\n        duration: path.duration,\r\n        startAddress: path.startAddress,\r\n        endAddress: path.endAddress,\r\n        name: path.name,\r\n    }));\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Card title=\"Saved Paths\">\r\n\r\n                    {/* Add the table here */}\r\n                    <Table columns={columns} dataSource={data} />\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"names":["Paths","_useContext","useContext","SavedPathsContext","setDisplayedPath","savedPaths","_useState","deletePath","useState","_useState2","_slicedToArray","paths","setPaths","navigate","useNavigate","user","JSON","parse","sessionStorage","getItem","useEffect","axios","get","concat","id","then","response","console","log","data","catch","error","handleSharePath","pathId","currentURL","protocol","window","location","hostname","port","portSuffix","pathname","getCurrentWebsiteURL","message","success","columns","title","dataIndex","key","render","text","record","_jsxs","children","Date","startTime","toLocaleString","startAddress","sorter","a","b","endTime","endAddress","_jsx","formatDuration","duration","Button","onClick","path","Modal","confirm","centered","content","onOk","post","code","reload","msg","hours","Math","floor","minutes","seconds","round","toString","padStart","map","index","name","Card","Table","dataSource"],"sourceRoot":""}